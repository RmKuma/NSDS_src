!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGNAS	jsoncpp.cpp	2471;"	d	file:
ALIGNAS	jsoncpp.cpp	2473;"	d	file:
AddData	target-table.h	/^	bool AddData(uint16_t dataObjectId, uint64_t dataObjectSize, Ptr<DataObject> dataObject){$/;"	f	class:ns3::TargetElement
AddDataObjects	target-table.cc	/^void TargetTable::AddDataObjects(uint16_t numberOfData){$/;"	f	class:ns3::TargetTable
AddTarget	host-node.cc	/^void HostNode::AddTarget(uint16_t tier, Ipv4Address targetIp, uint16_t targetPort){$/;"	f	class:ns3::HostNode
AddTarget	target-table.cc	/^void TargetTable::AddTarget(uint16_t tier, Ipv4Address ip, uint16_t port){$/;"	f	class:ns3::TargetTable
AfterGathering	flow.cc	/^void Flow::AfterGathering(){$/;"	f	class:ns3::Flow
AfterGathering	user.cc	/^void User::AfterGathering(){$/;"	f	class:ns3::User
AfterGetPacket	flow.cc	/^void Flow::AfterGetPacket(uint32_t size, uint32_t delay){$/;"	f	class:ns3::Flow
AfterGetPacket	user.cc	/^void User::AfterGetPacket(uint64_t size, uint64_t delay){$/;"	f	class:ns3::User
All	jsoncpp.cpp	/^    All   \/\/\/< Keep all comments.$/;"	e	enum:Json::CommentStyle::Enum	file:
BuiltStyledStreamWriter	jsoncpp.cpp	/^BuiltStyledStreamWriter::BuiltStyledStreamWriter($/;"	f	class:Json::BuiltStyledStreamWriter
BuiltStyledStreamWriter	jsoncpp.cpp	/^struct BuiltStyledStreamWriter : public StreamWriter {$/;"	s	namespace:Json	file:
CZString	json/json.h	/^  class CZString {$/;"	c	class:Json::Value
CZString	jsoncpp.cpp	/^Value::CZString::CZString(ArrayIndex index) : cstr_(nullptr), index_(index) {}$/;"	f	class:Json::Value::CZString
CZString	jsoncpp.cpp	/^Value::CZString::CZString(CZString&& other)$/;"	f	class:Json::Value::CZString
CZString	jsoncpp.cpp	/^Value::CZString::CZString(char const* str, unsigned length,$/;"	f	class:Json::Value::CZString
CZString	jsoncpp.cpp	/^Value::CZString::CZString(const CZString& other) {$/;"	f	class:Json::Value::CZString
CancelSendEvent	flow.cc	/^void Flow::CancelSendEvent(){$/;"	f	class:ns3::Flow
CancelSendEvent	user.cc	/^void User::CancelSendEvent(){$/;"	f	class:ns3::User
CharReader	json/json.h	/^class JSON_API CharReader {$/;"	c	namespace:Json
CharReaderBuilder	json/json.h	/^class JSON_API CharReaderBuilder : public CharReader::Factory {$/;"	c	namespace:Json
CharReaderBuilder	jsoncpp.cpp	/^CharReaderBuilder::CharReaderBuilder() { setDefaults(&settings_); }$/;"	f	class:Json::CharReaderBuilder
CheckRemainingSpace	target-table.h	/^	bool CheckRemainingSpace(uint64_t size){$/;"	f	class:ns3::TargetElement
CommentPlacement	json/json.h	/^enum CommentPlacement {$/;"	g	namespace:Json
CommentStyle	jsoncpp.cpp	/^struct CommentStyle {$/;"	s	namespace:Json	file:
Comments	json/json.h	/^  class Comments {$/;"	c	class:Json::Value
Comments	jsoncpp.cpp	/^Value::Comments::Comments(Comments&& that) : ptr_{std::move(that.ptr_)} {}$/;"	f	class:Json::Value::Comments
Comments	jsoncpp.cpp	/^Value::Comments::Comments(const Comments& that)$/;"	f	class:Json::Value::Comments
CreateUser	host-node.cc	/^void HostNode::CreateUser(uint16_t userId){	$/;"	f	class:ns3::HostNode
DATAS	opengym-parameter.h	21;"	d
DataObject	target-table.h	/^			DataObject () {};$/;"	f	class:ns3::DataObject
DataObject	target-table.h	/^			DataObject (uint16_t id, uint64_t size, uint16_t target, float popul){$/;"	f	class:ns3::DataObject
DataObject	target-table.h	/^	class DataObject : public Object$/;"	c	namespace:ns3
Deserialize	nvme-header.cc	/^uint32_t NVMeHeader::Deserialize (Buffer::Iterator start)$/;"	f	class:ns3::NVMeHeader
Deserialize	nvme-tag.cc	/^void NVMeTag::Deserialize (ns3::TagBuffer start)$/;"	f	class:ns3::NVMeTag
DuplicationPolicy	json/json.h	/^    enum DuplicationPolicy { noDuplication = 0, duplicate, duplicateOnCopy };$/;"	g	class:Json::Value::CZString
Enum	jsoncpp.cpp	/^  enum Enum {$/;"	g	struct:Json::CommentStyle	file:
ErrorInfo	jsoncpp.cpp	/^  class ErrorInfo {$/;"	c	class:Json::OurReader	file:
Exception	json/json.h	/^class JSON_API Exception : public std::exception {$/;"	c	namespace:Json
Exception	jsoncpp.cpp	/^Exception::Exception(String msg) : msg_(std::move(msg)) {}$/;"	f	class:Json::Exception
FILESIZE	opengym-parameter.h	12;"	d
Factory	json/json.h	/^  class JSON_API Factory {$/;"	c	class:Json::CharReader
Factory	json/json.h	/^  class JSON_API Factory {$/;"	c	class:Json::StreamWriter
Features	json/json.h	/^class JSON_API Features {$/;"	c	namespace:Json
Flow	flow.cc	/^Flow::Flow ()$/;"	f	class:ns3::Flow
Flow	flow.cc	/^Flow::Flow (uint32_t flowNumber)$/;"	f	class:ns3::Flow
Flow	flow.h	/^class Flow : public Object$/;"	c	namespace:ns3
GetCurrentDelay	flow.cc	/^uint32_t Flow::GetCurrentDelay(){$/;"	f	class:ns3::Flow
GetCurrentDelay	user.h	/^	uint64_t GetCurrentDelay(){$/;"	f	class:ns3::User
GetCurrentGoodput	flow.cc	/^uint32_t Flow::GetCurrentGoodput(){$/;"	f	class:ns3::Flow
GetCurrentGoodput	user.h	/^	uint64_t GetCurrentGoodput(){$/;"	f	class:ns3::User
GetCurrentPackets	flow.cc	/^uint32_t Flow::GetCurrentPackets(){$/;"	f	class:ns3::Flow
GetCurrentResults	user.h	/^	uint64_t GetCurrentResults(){$/;"	f	class:ns3::User
GetDataObjectId	user.h	/^	uint16_t GetDataObjectId(){$/;"	f	class:ns3::User
GetFlowNumber	flow.cc	/^uint32_t Flow::GetFlowNumber(){$/;"	f	class:ns3::Flow
GetInstanceTypeId	nvme-header.cc	/^TypeId NVMeHeader::GetInstanceTypeId () const$/;"	f	class:ns3::NVMeHeader
GetInstanceTypeId	nvme-tag.cc	/^TypeId NVMeTag::GetInstanceTypeId () const$/;"	f	class:ns3::NVMeTag
GetInterval	flow.cc	/^uint32_t Flow::GetInterval(){$/;"	f	class:ns3::Flow
GetIp	target-table.h	/^	Ipv4Address GetIp(){$/;"	f	class:ns3::TargetElement
GetNextRequestFromBuffer	target-node.cc	/^void TargetNode::GetNextRequestFromBuffer (){$/;"	f	class:ns3::TargetNode
GetObjectId	target-table.h	/^			uint16_t GetObjectId(){$/;"	f	class:ns3::DataObject
GetPopularity	target-table.h	/^			float    GetPopularity(){$/;"	f	class:ns3::DataObject
GetPort	target-table.h	/^	uint16_t GetPort(){$/;"	f	class:ns3::TargetElement
GetRate	flow.cc	/^uint32_t Flow::GetRate(){$/;"	f	class:ns3::Flow
GetSendEvent	flow.cc	/^EventId Flow::GetSendEvent(){$/;"	f	class:ns3::Flow
GetSerializedSize	nvme-header.cc	/^uint32_t NVMeHeader::GetSerializedSize () const$/;"	f	class:ns3::NVMeHeader
GetSerializedSize	nvme-tag.cc	/^uint32_t NVMeTag::GetSerializedSize () const$/;"	f	class:ns3::NVMeTag
GetServiceTime	user.h	/^	uint64_t GetServiceTime(){$/;"	f	class:ns3::User
GetSize	target-table.h	/^			uint64_t GetSize(){$/;"	f	class:ns3::DataObject
GetTarget	target-table.h	/^			uint16_t GetTarget(){$/;"	f	class:ns3::DataObject
GetTargetDelay	flow.cc	/^uint32_t Flow::GetTargetDelay(){$/;"	f	class:ns3::Flow
GetTargetDelay	user.h	/^	uint64_t GetTargetDelay(){$/;"	f	class:ns3::User
GetTargetThroughput	user.h	/^	uint64_t GetTargetThroughput(){$/;"	f	class:ns3::User
GetTier	flow.cc	/^uint16_t Flow::GetTier(){$/;"	f	class:ns3::Flow
GetTier	target-table.h	/^	uint16_t GetTier(){$/;"	f	class:ns3::TargetElement
GetTimestamp	nvme-header.cc	/^uint64_t NVMeHeader::GetTimestamp () const$/;"	f	class:ns3::NVMeHeader
GetTimestamp	nvme-tag.cc	/^uint64_t NVMeTag::GetTimestamp () const$/;"	f	class:ns3::NVMeTag
GetTotalDataObjects	target-table.h	/^	uint16_t GetTotalDataObjects(){$/;"	f	class:ns3::TargetTable
GetTotalRequests	user.h	/^	uint64_t GetTotalRequests(){$/;"	f	class:ns3::User
GetTotalRx	host-node.cc	/^uint64_t HostNode::GetTotalRx() const{$/;"	f	class:ns3::HostNode
GetTotalRx	target-node.cc	/^uint64_t TargetNode::GetTotalRx () const{$/;"	f	class:ns3::TargetNode
GetTotalRxPackets	target-node.cc	/^uint64_t TargetNode::GetTotalRxPackets () const{$/;"	f	class:ns3::TargetNode
GetTotalTargets	target-table.h	/^	uint16_t GetTotalTargets(){$/;"	f	class:ns3::TargetTable
GetTotalTx	host-node.cc	/^uint64_t HostNode::GetTotalTx() const{$/;"	f	class:ns3::HostNode
GetTotalTxPackets	host-node.cc	/^uint64_t HostNode::GetTotalTxPackets() const{$/;"	f	class:ns3::HostNode
GetTotalTxPackets	target-node.cc	/^uint64_t TargetNode::GetTotalTxPackets () const{$/;"	f	class:ns3::TargetNode
GetTypeId	nvme-header.cc	/^TypeId NVMeHeader::GetTypeId ()$/;"	f	class:ns3::NVMeHeader
GetTypeId	nvme-tag.cc	/^TypeId NVMeTag::GetTypeId ()$/;"	f	class:ns3::NVMeTag
GetUserId	nvme-header.cc	/^uint16_t NVMeHeader::GetUserId () const$/;"	f	class:ns3::NVMeHeader
GetUserId	user.h	/^	uint16_t GetUserId(){$/;"	f	class:ns3::User
HOST_NODE_H	host-node.h	28;"	d
HandleAccept	host-node.cc	/^void HostNode::HandleAccept (Ptr<Socket> socket, const Address& from){$/;"	f	class:ns3::HostNode
HandleAccept	target-node.cc	/^void TargetNode::HandleAccept (Ptr<Socket> socket, const Address& from){$/;"	f	class:ns3::TargetNode
HandleRead	host-node.cc	/^void HostNode::HandleRead (Ptr<Socket> socket){$/;"	f	class:ns3::HostNode
HandleRead	target-node.cc	/^void TargetNode::HandleRead (Ptr<Socket> socket){$/;"	f	class:ns3::TargetNode
HeuristicAction_knapsack	host-node.cc	/^void HostNode::HeuristicAction_knapsack(uint64_t datas[][6]){$/;"	f	class:ns3::HostNode
HostNode	host-node.cc	/^HostNode::HostNode ()$/;"	f	class:ns3::HostNode
HostNode	host-node.h	/^class HostNode: public Application$/;"	c	namespace:ns3
INITDELAY	opengym-parameter.h	11;"	d
INITRATE	opengym-parameter.h	10;"	d
InRange	jsoncpp.cpp	/^static inline bool InRange(double d, T min, U max) {$/;"	f	namespace:Json
IsFinished	user.h	/^	bool IsFinished(){$/;"	f	class:ns3::User
IsIntegral	jsoncpp.cpp	/^static bool IsIntegral(double d) {$/;"	f	namespace:Json
JSONCPP_DEPRECATED	json/json-forwards.h	178;"	d
JSONCPP_DEPRECATED	json/json-forwards.h	182;"	d
JSONCPP_DEPRECATED	json/json-forwards.h	184;"	d
JSONCPP_DEPRECATED	json/json-forwards.h	188;"	d
JSONCPP_DEPRECATED	json/json-forwards.h	192;"	d
JSONCPP_DEPRECATED	json/json.h	322;"	d
JSONCPP_DEPRECATED	json/json.h	326;"	d
JSONCPP_DEPRECATED	json/json.h	328;"	d
JSONCPP_DEPRECATED	json/json.h	332;"	d
JSONCPP_DEPRECATED	json/json.h	336;"	d
JSONCPP_DEPRECATED_STACK_LIMIT	jsoncpp.cpp	280;"	d	file:
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	json/json-forwards.h	122;"	d
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	json/json-forwards.h	130;"	d
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	json/json.h	266;"	d
JSONCPP_NOEXCEPT	json/json-forwards.h	163;"	d
JSONCPP_NOEXCEPT	json/json-forwards.h	166;"	d
JSONCPP_NOEXCEPT	json/json-forwards.h	169;"	d
JSONCPP_NOEXCEPT	json/json-forwards.h	172;"	d
JSONCPP_NOEXCEPT	json/json.h	307;"	d
JSONCPP_NOEXCEPT	json/json.h	310;"	d
JSONCPP_NOEXCEPT	json/json.h	313;"	d
JSONCPP_NOEXCEPT	json/json.h	316;"	d
JSONCPP_NOEXCEPT	jsoncpp.cpp	/^Exception::~Exception() JSONCPP_NOEXCEPT = default;$/;"	m	namespace:Json	file:
JSONCPP_NORETURN	json/json.h	563;"	d
JSONCPP_NO_LOCALE_SUPPORT	jsoncpp.cpp	101;"	d	file:
JSONCPP_OP_EXPLICIT	json/json-forwards.h	164;"	d
JSONCPP_OP_EXPLICIT	json/json-forwards.h	167;"	d
JSONCPP_OP_EXPLICIT	json/json-forwards.h	170;"	d
JSONCPP_OP_EXPLICIT	json/json-forwards.h	173;"	d
JSONCPP_OP_EXPLICIT	json/json.h	308;"	d
JSONCPP_OP_EXPLICIT	json/json.h	311;"	d
JSONCPP_OP_EXPLICIT	json/json.h	314;"	d
JSONCPP_OP_EXPLICIT	json/json.h	317;"	d
JSONCPP_OVERRIDE	json/json-forwards.h	160;"	d
JSONCPP_OVERRIDE	json/json.h	304;"	d
JSONCPP_USING_SECURE_MEMORY	json/json.h	106;"	d
JSONCPP_USING_SECURE_MEMORY	json/json.h	108;"	d
JSONCPP_VERSION_HEXA	json/json.h	101;"	d
JSONCPP_VERSION_MAJOR	json/json.h	97;"	d
JSONCPP_VERSION_MINOR	json/json.h	98;"	d
JSONCPP_VERSION_PATCH	json/json.h	99;"	d
JSONCPP_VERSION_QUALIFIER	json/json.h	100;"	d
JSONCPP_VERSION_STRING	json/json.h	96;"	d
JSON_ALLOCATOR_H_INCLUDED	json/json.h	133;"	d
JSON_AMALGAMATED_H_INCLUDED	json/json.h	76;"	d
JSON_API	json/json-forwards.h	121;"	d
JSON_API	json/json-forwards.h	124;"	d
JSON_API	json/json-forwards.h	129;"	d
JSON_API	json/json-forwards.h	135;"	d
JSON_API	json/json.h	265;"	d
JSON_API	json/json.h	279;"	d
JSON_ASSERT	json/json.h	2296;"	d
JSON_ASSERTIONS_H_INCLUDED	json/json.h	2280;"	d
JSON_ASSERT_MESSAGE	json/json.h	2327;"	d
JSON_ASSERT_UNREACHABLE	jsoncpp.cpp	2455;"	d	file:
JSON_CONFIG_H_INCLUDED	json/json-forwards.h	92;"	d
JSON_CONFIG_H_INCLUDED	json/json.h	236;"	d
JSON_FAIL_MESSAGE	json/json.h	2303;"	d
JSON_FEATURES_H_INCLUDED	json/json.h	471;"	d
JSON_FORWARDS_H_INCLUDED	json/json-forwards.h	270;"	d
JSON_FORWARDS_H_INCLUDED	json/json.h	414;"	d
JSON_FORWARD_AMALGAMATED_H_INCLUDED	json/json-forwards.h	77;"	d
JSON_HAS_INT64	json/json-forwards.h	212;"	d
JSON_HAS_INT64	json/json.h	356;"	d
JSON_H_INCLUDED	json/json.h	552;"	d
JSON_IS_AMALGAMATION	json/json-forwards.h	80;"	d
JSON_IS_AMALGAMATION	json/json.h	79;"	d
JSON_READER_H_INCLUDED	json/json.h	1482;"	d
JSON_USE_EXCEPTION	json/json-forwards.h	105;"	d
JSON_USE_EXCEPTION	json/json.h	249;"	d
JSON_USE_INT64_DOUBLE_CONVERSION	json/json-forwards.h	196;"	d
JSON_USE_INT64_DOUBLE_CONVERSION	json/json.h	340;"	d
JSON_USE_NULLREF	json/json-forwards.h	110;"	d
JSON_USE_NULLREF	json/json.h	254;"	d
JSON_VERSION_H_INCLUDED	json/json.h	86;"	d
JSON_WRITER_H_INCLUDED	json/json.h	1899;"	d
Json	json/json-forwards.h	/^namespace Json {$/;"	n
Json	json/json.h	/^namespace Json {$/;"	n
Json	jsoncpp.cpp	/^namespace Json {$/;"	n	file:
Kind	json/json.h	/^  enum Kind { kindNone = 0, kindIndex, kindKey };$/;"	g	class:Json::PathArgument
LIB_JSONCPP_JSON_TOOL_H_INCLUDED	jsoncpp.cpp	93;"	d	file:
LogicError	json/json.h	/^class JSON_API LogicError : public Exception {$/;"	c	namespace:Json
LogicError	jsoncpp.cpp	/^LogicError::LogicError(String const& msg) : Exception(msg) {}$/;"	f	class:Json::LogicError
MAXSERVICETIME	opengym-parameter.h	34;"	d
MAX_TARGET_QUEUE	opengym-parameter.h	44;"	d
MINSERVICETIME	opengym-parameter.h	35;"	d
Migration	host-node.cc	/^void HostNode::Migration(uint16_t dataObject, uint16_t destination_target){$/;"	f	class:ns3::HostNode
Most	jsoncpp.cpp	/^    Most, \/\/\/< Recover odd behavior of previous versions (not implemented yet).$/;"	e	enum:Json::CommentStyle::Enum	file:
NUMOFTIER	opengym-parameter.h	15;"	d
NVMEOF_FLOW_H	flow.h	2;"	d
NVME_HEADER_H	nvme-header.h	2;"	d
NVME_TAG_H	nvme-tag.h	2;"	d
NVMeHeader	nvme-header.cc	/^NVMeHeader::NVMeHeader ()$/;"	f	class:ns3::NVMeHeader
NVMeHeader	nvme-header.cc	/^NVMeHeader::NVMeHeader (uint16_t userId)$/;"	f	class:ns3::NVMeHeader
NVMeHeader	nvme-header.h	/^class NVMeHeader : public Header$/;"	c	namespace:ns3
NVMeTag	nvme-tag.cc	/^NVMeTag::NVMeTag ()$/;"	f	class:ns3::NVMeTag
NVMeTag	nvme-tag.h	/^class NVMeTag : public Tag$/;"	c	namespace:ns3
None	jsoncpp.cpp	/^    None, \/\/\/< Drop all comments.$/;"	e	enum:Json::CommentStyle::Enum	file:
OBS_INTERVAL	opengym-parameter.h	38;"	d
OPENGYM_H	opengym.h	3;"	d
OPENGYM_PARA_H	opengym-parameter.h	2;"	d
OR_PAGESIZE	opengym-parameter.h	24;"	d
ObjectValues	json/json.h	/^  typedef std::map<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
Observe	host-node.cc	/^void HostNode::Observe (){$/;"	f	class:ns3::HostNode
OurCharReader	jsoncpp.cpp	/^  OurCharReader(bool collectComments, OurFeatures const& features)$/;"	f	class:Json::OurCharReader
OurCharReader	jsoncpp.cpp	/^class OurCharReader : public CharReader {$/;"	c	namespace:Json	file:
OurFeatures	jsoncpp.cpp	/^class OurFeatures {$/;"	c	namespace:Json	file:
OurReader	jsoncpp.cpp	/^OurReader::OurReader(OurFeatures const& features) : features_(features) {}$/;"	f	class:Json::OurReader
OurReader	jsoncpp.cpp	/^class OurReader {$/;"	c	namespace:Json	file:
PAGESIZE	opengym-parameter.h	27;"	d
PC_INTERVAL	opengym-parameter.h	39;"	d
Path	json/json.h	/^class JSON_API Path {$/;"	c	namespace:Json
Path	jsoncpp.cpp	/^Path::Path(const String& path, const PathArgument& a1, const PathArgument& a2,$/;"	f	class:Json::Path
PathArgument	json/json.h	/^class JSON_API PathArgument {$/;"	c	namespace:Json
PathArgument	jsoncpp.cpp	/^PathArgument::PathArgument(ArrayIndex index)$/;"	f	class:Json::PathArgument
PathArgument	jsoncpp.cpp	/^PathArgument::PathArgument(String key) : key_(std::move(key)), kind_(kindKey) {}$/;"	f	class:Json::PathArgument
PathArgument	jsoncpp.cpp	/^PathArgument::PathArgument(const char* key) : key_(key), kind_(kindKey) {}$/;"	f	class:Json::PathArgument
PopularityChangeSmooth	host-node.cc	/^void HostNode::PopularityChangeSmooth(uint16_t smoothing){$/;"	f	class:ns3::HostNode
PopularityChangeStart	host-node.cc	/^void HostNode::PopularityChangeStart(){$/;"	f	class:ns3::HostNode
PrecisionType	json/json.h	/^enum PrecisionType {$/;"	g	namespace:Json
Print	nvme-header.cc	/^void NVMeHeader::Print (std::ostream& os) const$/;"	f	class:ns3::NVMeHeader
Print	nvme-tag.cc	/^void NVMeTag::Print (std::ostream& os) const$/;"	f	class:ns3::NVMeTag
PrintResult	host-node.cc	/^void HostNode::PrintResult(){$/;"	f	class:ns3::HostNode
QUEUE_DEPTH	opengym-parameter.h	43;"	d
REQUESTPORT	opengym-parameter.h	7;"	d
REQUESTSIZE	opengym-parameter.h	25;"	d
RESPONSESIZE	opengym-parameter.h	26;"	d
RESULTPORT	opengym-parameter.h	8;"	d
Reader	jsoncpp.cpp	/^Reader::Reader() : features_(Features::all()) {}$/;"	f	class:Json::Reader
Reader	jsoncpp.cpp	/^Reader::Reader(const Features& features) : features_(features) {}$/;"	f	class:Json::Reader
RemoveData	target-table.h	/^	void RemoveData(uint16_t dataObjectId){$/;"	f	class:ns3::TargetElement
RuntimeError	json/json.h	/^class JSON_API RuntimeError : public Exception {$/;"	c	namespace:Json
RuntimeError	jsoncpp.cpp	/^RuntimeError::RuntimeError(String const& msg) : Exception(msg) {}$/;"	f	class:Json::RuntimeError
SERVICETIMEAVG	opengym-parameter.h	32;"	d
SERVICETIMESTD	opengym-parameter.h	33;"	d
SMOOTHING	opengym-parameter.h	41;"	d
SPEEDUP	opengym-parameter.h	28;"	d
SecureAllocator	json/json.h	/^  SecureAllocator() {}$/;"	f	class:Json::SecureAllocator
SecureAllocator	json/json.h	/^  template <typename U> SecureAllocator(const SecureAllocator<U>&) {}$/;"	f	class:Json::SecureAllocator
SecureAllocator	json/json.h	/^template <typename T> class SecureAllocator {$/;"	c	namespace:Json
SelectData	target-table.cc	/^uint16_t TargetTable::SelectData(){$/;"	f	class:ns3::TargetTable
SendObs	host-node.cc	/^void HostNode::SendObs(uint64_t obsArray[][6], int32_t reward){$/;"	f	class:ns3::HostNode
SendReadRequestPacket	flow.cc	/^void Flow::SendReadRequestPacket(){$/;"	f	class:ns3::Flow
SendReadRequestPacket	host-node.cc	/^void HostNode::SendReadRequestPacket (uint16_t userId)$/;"	f	class:ns3::HostNode
SendReadResultPacket	target-node.cc	/^void TargetNode::SendReadResultPacket(){$/;"	f	class:ns3::TargetNode
SendRequest	user.cc	/^void User::SendRequest(){$/;"	f	class:ns3::User
SendReset	host-node.cc	/^void HostNode::SendReset(){$/;"	f	class:ns3::HostNode
SendTargetFromBuffer	host-node.cc	/^void HostNode::SendTargetFromBuffer(uint16_t target){$/;"	f	class:ns3::HostNode
Serialize	nvme-header.cc	/^void NVMeHeader::Serialize (Buffer::Iterator start) const$/;"	f	class:ns3::NVMeHeader
Serialize	nvme-tag.cc	/^void NVMeTag::Serialize (ns3::TagBuffer start) const$/;"	f	class:ns3::NVMeTag
SetGymPort	host-node.cc	/^void HostNode::SetGymPort(uint16_t gymPort){$/;"	f	class:ns3::HostNode
SetPopularity	target-table.h	/^			void SetPopularity(float popularity){$/;"	f	class:ns3::DataObject
SetRate	flow.cc	/^void Flow::SetRate(uint32_t sendRate){$/;"	f	class:ns3::Flow
SetSendCallback	flow.cc	/^void Flow::SetSendCallback(sendCallback scb){$/;"	f	class:ns3::Flow
SetSendCallback	user.cc	/^void User::SetSendCallback(sendCallback scb){$/;"	f	class:ns3::User
SetTarget	target-table.h	/^			void SetTarget(uint16_t target){$/;"	f	class:ns3::DataObject
SetTargetDelay	flow.cc	/^void Flow::SetTargetDelay(uint32_t delay){$/;"	f	class:ns3::Flow
SetTargetDelay	user.h	/^	void SetTargetDelay(uint64_t delay){$/;"	f	class:ns3::User
SetTier	flow.cc	/^void Flow::SetTier(uint16_t tier){$/;"	f	class:ns3::Flow
SetTier	target-node.cc	/^void TargetNode::SetTier(uint16_t tier){$/;"	f	class:ns3::TargetNode
SetTimestamp	nvme-header.cc	/^void NVMeHeader::SetTimestamp (uint64_t timestamp)$/;"	f	class:ns3::NVMeHeader
SetTimestamp	nvme-tag.cc	/^void NVMeTag::SetTimestamp (uint64_t timestamp)$/;"	f	class:ns3::NVMeTag
SetUserId	nvme-header.cc	/^void NVMeHeader::SetUserId (uint16_t userId)$/;"	f	class:ns3::NVMeHeader
StartApplication	host-node.cc	/^void HostNode::StartApplication ()$/;"	f	class:ns3::HostNode
StartApplication	target-node.cc	/^void TargetNode::StartApplication ()$/;"	f	class:ns3::TargetNode
StaticString	json/json.h	/^  explicit StaticString(const char* czstring) : c_str_(czstring) {}$/;"	f	class:Json::StaticString
StaticString	json/json.h	/^class JSON_API StaticString {$/;"	c	namespace:Json
StopApplication	host-node.cc	/^void HostNode::StopApplication ()$/;"	f	class:ns3::HostNode
StopApplication	target-node.cc	/^void TargetNode::StopApplication ()$/;"	f	class:ns3::TargetNode
StreamWriter	json/json.h	/^class JSON_API StreamWriter {$/;"	c	namespace:Json
StreamWriter	jsoncpp.cpp	/^StreamWriter::StreamWriter() : sout_(nullptr) {}$/;"	f	class:Json::StreamWriter
StreamWriterBuilder	json/json.h	/^class JSON_API StreamWriterBuilder : public StreamWriter::Factory {$/;"	c	namespace:Json
StreamWriterBuilder	jsoncpp.cpp	/^StreamWriterBuilder::StreamWriterBuilder() { setDefaults(&settings_); }$/;"	f	class:Json::StreamWriterBuilder
StringStorage	json/json.h	/^    struct StringStorage {$/;"	s	class:Json::Value::CZString
StructuredError	jsoncpp.cpp	/^  struct StructuredError {$/;"	s	class:Json::OurReader	file:
StyledStreamWriter	jsoncpp.cpp	/^StyledStreamWriter::StyledStreamWriter(String indentation)$/;"	f	class:Json::StyledStreamWriter
TARGETS	opengym-parameter.h	20;"	d
TARGETSIZE	opengym-parameter.h	13;"	d
TARGET_NODE_H	target-node.h	28;"	d
TARGET_TABLE_H	target-table.h	2;"	d
TIERS	opengym-parameter.h	/^static uint16_t TIERS[NUMOFTIER] = {1,1,1};$/;"	v
TargetElement	target-table.h	/^	TargetElement (uint16_t tier, Ipv4Address ip, uint16_t port, uint64_t size) {$/;"	f	class:ns3::TargetElement
TargetElement	target-table.h	/^class TargetElement : public Object$/;"	c	namespace:ns3
TargetNode	target-node.cc	/^TargetNode::TargetNode ()$/;"	f	class:ns3::TargetNode
TargetNode	target-node.h	/^class TargetNode: public Application$/;"	c	namespace:ns3
TargetTable	target-table.cc	/^TargetTable::TargetTable()$/;"	f	class:ns3::TargetTable
TargetTable	target-table.h	/^class TargetTable $/;"	c	namespace:ns3
Token	jsoncpp.cpp	/^  class Token {$/;"	c	class:Json::OurReader	file:
TokenType	jsoncpp.cpp	/^  enum TokenType {$/;"	g	class:Json::OurReader	file:
USERS	opengym-parameter.h	22;"	d
USER_H	user.h	2;"	d
User	user.cc	/^User::User ()$/;"	f	class:ns3::User
User	user.cc	/^User::User (uint16_t userId, uint16_t dataObjectId, uint64_t serviceTime, uint64_t targetDelay)$/;"	f	class:ns3::User
User	user.h	/^class User : public Object$/;"	c	namespace:ns3
Value	json/json.h	/^class JSON_API Value {$/;"	c	namespace:Json
Value	jsoncpp.cpp	/^Value::Value(Int value) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(Int64 value) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(UInt value) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(UInt64 value) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(Value&& other) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(ValueType type) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(bool value) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(const StaticString& value) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(const String& value) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(const Value& other) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(const char* begin, const char* end) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(const char* value) {$/;"	f	class:Json::Value
Value	jsoncpp.cpp	/^Value::Value(double value) {$/;"	f	class:Json::Value
ValueConstIterator	json/json.h	/^class JSON_API ValueConstIterator : public ValueIteratorBase {$/;"	c	namespace:Json
ValueConstIterator	jsoncpp.cpp	/^ValueConstIterator::ValueConstIterator($/;"	f	class:Json::ValueConstIterator
ValueConstIterator	jsoncpp.cpp	/^ValueConstIterator::ValueConstIterator(ValueIterator const& other)$/;"	f	class:Json::ValueConstIterator
ValueHolder	json/json.h	/^  union ValueHolder {$/;"	u	class:Json::Value
ValueIterator	json/json.h	/^class JSON_API ValueIterator : public ValueIteratorBase {$/;"	c	namespace:Json
ValueIterator	jsoncpp.cpp	/^ValueIterator::ValueIterator(const Value::ObjectValues::iterator& current)$/;"	f	class:Json::ValueIterator
ValueIterator	jsoncpp.cpp	/^ValueIterator::ValueIterator(const ValueConstIterator& other)$/;"	f	class:Json::ValueIterator
ValueIteratorBase	json/json.h	/^class JSON_API ValueIteratorBase {$/;"	c	namespace:Json
ValueIteratorBase	jsoncpp.cpp	/^ValueIteratorBase::ValueIteratorBase($/;"	f	class:Json::ValueIteratorBase
ValueIteratorBase	jsoncpp.cpp	/^ValueIteratorBase::ValueIteratorBase() : current_() {}$/;"	f	class:Json::ValueIteratorBase
ValueType	json/json.h	/^enum ValueType {$/;"	g	namespace:Json
ZIPFALPHA	opengym-parameter.h	18;"	d
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES	jsoncpp.cpp	268;"	d	file:
addChildValues_	jsoncpp.cpp	/^  bool addChildValues_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
addComment	jsoncpp.cpp	/^void OurReader::addComment(Location begin, Location end,$/;"	f	class:Json::OurReader
addComment	jsoncpp.cpp	/^void Reader::addComment(Location begin, Location end,$/;"	f	class:Json::Reader
addError	jsoncpp.cpp	/^bool OurReader::addError(const String& message, Token& token, Location extra) {$/;"	f	class:Json::OurReader
addError	jsoncpp.cpp	/^bool Reader::addError(const String& message, Token& token, Location extra) {$/;"	f	class:Json::Reader
addErrorAndRecover	jsoncpp.cpp	/^bool OurReader::addErrorAndRecover(const String& message, Token& token,$/;"	f	class:Json::OurReader
addErrorAndRecover	jsoncpp.cpp	/^bool Reader::addErrorAndRecover(const String& message, Token& token,$/;"	f	class:Json::Reader
addPathInArg	jsoncpp.cpp	/^void Path::addPathInArg(const String& \/*path*\/, const InArgs& in,$/;"	f	class:Json::Path
address	json/json.h	/^  const_pointer address(const_reference x) const { return std::addressof(x); }$/;"	f	class:Json::SecureAllocator
address	json/json.h	/^  pointer address(reference x) const { return std::addressof(x); }$/;"	f	class:Json::SecureAllocator
all	jsoncpp.cpp	/^Features Features::all() { return {}; }$/;"	f	class:Json::Features
all	jsoncpp.cpp	/^OurFeatures OurFeatures::all() { return {}; }$/;"	f	class:Json::OurFeatures
allocate	json/json.h	/^  pointer allocate(size_type n) {$/;"	f	class:Json::SecureAllocator
allocated_	json/json.h	/^    unsigned int allocated_ : 1;$/;"	m	struct:Json::Value::__anon4
allowComments_	jsoncpp.cpp	/^  bool allowComments_;$/;"	m	class:Json::OurFeatures	file:
allowDroppedNullPlaceholders_	jsoncpp.cpp	/^  bool allowDroppedNullPlaceholders_;$/;"	m	class:Json::OurFeatures	file:
allowNumericKeys_	jsoncpp.cpp	/^  bool allowNumericKeys_;$/;"	m	class:Json::OurFeatures	file:
allowSingleQuotes_	jsoncpp.cpp	/^  bool allowSingleQuotes_;$/;"	m	class:Json::OurFeatures	file:
allowSpecialFloats_	jsoncpp.cpp	/^  bool allowSpecialFloats_;$/;"	m	class:Json::OurFeatures	file:
allowTrailingCommas_	jsoncpp.cpp	/^  bool allowTrailingCommas_;$/;"	m	class:Json::OurFeatures	file:
append	jsoncpp.cpp	/^Value& Value::append(Value&& value) {$/;"	f	class:Json::Value
append	jsoncpp.cpp	/^Value& Value::append(const Value& value) { return append(Value(value)); }$/;"	f	class:Json::Value
args_	json/json.h	/^  Args args_;$/;"	m	class:Json::Path
arrayValue	json/json.h	/^  arrayValue,    \/\/\/< array value (ordered list)$/;"	e	enum:Json::ValueType
as	json/json.h	/^template <> inline Int Value::as<Int>() const { return asInt(); }$/;"	f	class:Json::Value
as	json/json.h	/^template <> inline Int64 Value::as<Int64>() const { return asInt64(); }$/;"	f	class:Json::Value
as	json/json.h	/^template <> inline String Value::as<String>() const { return asString(); }$/;"	f	class:Json::Value
as	json/json.h	/^template <> inline UInt Value::as<UInt>() const { return asUInt(); }$/;"	f	class:Json::Value
as	json/json.h	/^template <> inline UInt64 Value::as<UInt64>() const { return asUInt64(); }$/;"	f	class:Json::Value
as	json/json.h	/^template <> inline bool Value::as<bool>() const { return asBool(); }$/;"	f	class:Json::Value
as	json/json.h	/^template <> inline const char* Value::as<const char*>() const {$/;"	f	class:Json::Value
as	json/json.h	/^template <> inline double Value::as<double>() const { return asDouble(); }$/;"	f	class:Json::Value
as	json/json.h	/^template <> inline float Value::as<float>() const { return asFloat(); }$/;"	f	class:Json::Value
asBool	jsoncpp.cpp	/^bool Value::asBool() const {$/;"	f	class:Json::Value
asCString	jsoncpp.cpp	/^const char* Value::asCString() const {$/;"	f	class:Json::Value
asDouble	jsoncpp.cpp	/^double Value::asDouble() const {$/;"	f	class:Json::Value
asFloat	jsoncpp.cpp	/^float Value::asFloat() const {$/;"	f	class:Json::Value
asInt	jsoncpp.cpp	/^Value::Int Value::asInt() const {$/;"	f	class:Json::Value
asInt64	jsoncpp.cpp	/^Value::Int64 Value::asInt64() const {$/;"	f	class:Json::Value
asLargestInt	jsoncpp.cpp	/^LargestInt Value::asLargestInt() const {$/;"	f	class:Json::Value
asLargestUInt	jsoncpp.cpp	/^LargestUInt Value::asLargestUInt() const {$/;"	f	class:Json::Value
asString	jsoncpp.cpp	/^String Value::asString() const {$/;"	f	class:Json::Value
asUInt	jsoncpp.cpp	/^Value::UInt Value::asUInt() const {$/;"	f	class:Json::Value
asUInt64	jsoncpp.cpp	/^Value::UInt64 Value::asUInt64() const {$/;"	f	class:Json::Value
begin	jsoncpp.cpp	/^Value::const_iterator Value::begin() const {$/;"	f	class:Json::Value
begin	jsoncpp.cpp	/^Value::iterator Value::begin() {$/;"	f	class:Json::Value
begin_	jsoncpp.cpp	/^  Location begin_ = nullptr;$/;"	m	class:Json::OurReader	file:
bits_	json/json.h	/^  } bits_;$/;"	m	class:Json::Value	typeref:struct:Json::Value::__anon4
bool_	json/json.h	/^    bool bool_;$/;"	m	union:Json::Value::ValueHolder
booleanValue	json/json.h	/^  booleanValue,  \/\/\/< bool value$/;"	e	enum:Json::ValueType
c_str	json/json.h	/^  const char* c_str() const { return c_str_; }$/;"	f	class:Json::StaticString
c_str_	json/json.h	/^  const char* c_str_;$/;"	m	class:Json::StaticString
clear	jsoncpp.cpp	/^void Value::clear() {$/;"	f	class:Json::Value
cloneUnique	jsoncpp.cpp	/^static std::unique_ptr<T> cloneUnique(const std::unique_ptr<T>& p) {$/;"	f	namespace:Json
codePointToUTF8	jsoncpp.cpp	/^static inline String codePointToUTF8(unsigned int cp) {$/;"	f	namespace:Json
collectComments_	jsoncpp.cpp	/^  bool collectComments_ = false;$/;"	m	class:Json::OurReader	file:
collectComments_	jsoncpp.cpp	/^  bool const collectComments_;$/;"	m	class:Json::OurCharReader	file:
colonSymbol_	jsoncpp.cpp	/^  String colonSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
commentAfter	json/json.h	/^  commentAfter, \/\/\/< a comment on the line after a value (only make sense for$/;"	e	enum:Json::CommentPlacement
commentAfterOnSameLine	json/json.h	/^  commentAfterOnSameLine, \/\/\/< a comment just after a value on the same line$/;"	e	enum:Json::CommentPlacement
commentBefore	json/json.h	/^  commentBefore = 0,      \/\/\/< a comment placed on the line before a value$/;"	e	enum:Json::CommentPlacement
comments_	json/json.h	/^  Comments comments_;$/;"	m	class:Json::Value
compare	jsoncpp.cpp	/^int Value::compare(const Value& other) const {$/;"	f	class:Json::Value
computeDistance	jsoncpp.cpp	/^ValueIteratorBase::computeDistance(const SelfType& other) const {$/;"	f	class:Json::ValueIteratorBase
construct	json/json.h	/^  template <typename... Args> void construct(pointer p, Args&&... args) {$/;"	f	class:Json::SecureAllocator
containsNewLine	jsoncpp.cpp	/^bool OurReader::containsNewLine(OurReader::Location begin,$/;"	f	class:Json::OurReader
containsNewLine	jsoncpp.cpp	/^bool Reader::containsNewLine(Reader::Location begin, Reader::Location end) {$/;"	f	class:Json::Reader
copy	jsoncpp.cpp	/^void Value::copy(const Value& other) {$/;"	f	class:Json::Value
copy	jsoncpp.cpp	/^void ValueIteratorBase::copy(const SelfType& other) {$/;"	f	class:Json::ValueIteratorBase
copyPayload	jsoncpp.cpp	/^void Value::copyPayload(const Value& other) {$/;"	f	class:Json::Value
cs_	jsoncpp.cpp	/^  CommentStyle::Enum cs_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
cstr_	json/json.h	/^    char const* cstr_; \/\/ actually, a prefixed string, unless policy is noDup$/;"	m	class:Json::Value::CZString
currentValue	jsoncpp.cpp	/^Value& OurReader::currentValue() { return *(nodes_.top()); }$/;"	f	class:Json::OurReader
currentValue	jsoncpp.cpp	/^Value& Reader::currentValue() { return *(nodes_.top()); }$/;"	f	class:Json::Reader
current_	json/json.h	/^  Value::ObjectValues::iterator current_;$/;"	m	class:Json::ValueIteratorBase
current_	jsoncpp.cpp	/^  Location current_ = nullptr;$/;"	m	class:Json::OurReader	file:
data	jsoncpp.cpp	/^const char* Value::CZString::data() const { return cstr_; }$/;"	f	class:Json::Value::CZString
dataObjectMap	target-table.h	/^	std::map<uint16_t, Ptr<DataObject>> dataObjectMap; $/;"	m	class:ns3::TargetTable
dataObjectMap	target-table.h	/^	std::map<uint16_t, Ptr<DataObject>> dataObjectMap;$/;"	m	class:ns3::TargetElement
deallocate	json/json.h	/^  void deallocate(volatile pointer p, size_type n) {$/;"	f	class:Json::SecureAllocator
decimalPlaces	json/json.h	/^  decimalPlaces          \/\/\/< we set max number of digits after "." in string$/;"	e	enum:Json::PrecisionType
decodeDouble	jsoncpp.cpp	/^bool OurReader::decodeDouble(Token& token) {$/;"	f	class:Json::OurReader
decodeDouble	jsoncpp.cpp	/^bool OurReader::decodeDouble(Token& token, Value& decoded) {$/;"	f	class:Json::OurReader
decodeDouble	jsoncpp.cpp	/^bool Reader::decodeDouble(Token& token) {$/;"	f	class:Json::Reader
decodeDouble	jsoncpp.cpp	/^bool Reader::decodeDouble(Token& token, Value& decoded) {$/;"	f	class:Json::Reader
decodeNumber	jsoncpp.cpp	/^bool OurReader::decodeNumber(Token& token) {$/;"	f	class:Json::OurReader
decodeNumber	jsoncpp.cpp	/^bool OurReader::decodeNumber(Token& token, Value& decoded) {$/;"	f	class:Json::OurReader
decodeNumber	jsoncpp.cpp	/^bool Reader::decodeNumber(Token& token) {$/;"	f	class:Json::Reader
decodeNumber	jsoncpp.cpp	/^bool Reader::decodeNumber(Token& token, Value& decoded) {$/;"	f	class:Json::Reader
decodePrefixedString	jsoncpp.cpp	/^inline static void decodePrefixedString(bool isPrefixed, char const* prefixed,$/;"	f	namespace:Json
decodeString	jsoncpp.cpp	/^bool OurReader::decodeString(Token& token) {$/;"	f	class:Json::OurReader
decodeString	jsoncpp.cpp	/^bool OurReader::decodeString(Token& token, String& decoded) {$/;"	f	class:Json::OurReader
decodeString	jsoncpp.cpp	/^bool Reader::decodeString(Token& token) {$/;"	f	class:Json::Reader
decodeString	jsoncpp.cpp	/^bool Reader::decodeString(Token& token, String& decoded) {$/;"	f	class:Json::Reader
decodeUnicodeCodePoint	jsoncpp.cpp	/^bool OurReader::decodeUnicodeCodePoint(Token& token, Location& current,$/;"	f	class:Json::OurReader
decodeUnicodeCodePoint	jsoncpp.cpp	/^bool Reader::decodeUnicodeCodePoint(Token& token, Location& current,$/;"	f	class:Json::Reader
decodeUnicodeEscapeSequence	jsoncpp.cpp	/^bool OurReader::decodeUnicodeEscapeSequence(Token& token, Location& current,$/;"	f	class:Json::OurReader
decodeUnicodeEscapeSequence	jsoncpp.cpp	/^bool Reader::decodeUnicodeEscapeSequence(Token& token, Location& current,$/;"	f	class:Json::Reader
decrement	jsoncpp.cpp	/^void ValueIteratorBase::decrement() { --current_; }$/;"	f	class:Json::ValueIteratorBase
defaultRealPrecision	json/json.h	/^  static constexpr UInt defaultRealPrecision = 17;$/;"	m	class:Json::Value
demand	jsoncpp.cpp	/^Value* Value::demand(char const* begin, char const* end) {$/;"	f	class:Json::Value
deref	jsoncpp.cpp	/^Value& ValueIteratorBase::deref() { return current_->second; }$/;"	f	class:Json::ValueIteratorBase
deref	jsoncpp.cpp	/^const Value& ValueIteratorBase::deref() const { return current_->second; }$/;"	f	class:Json::ValueIteratorBase
destroy	json/json.h	/^  void destroy(pointer p) {$/;"	f	class:Json::SecureAllocator
dropNullPlaceholders	jsoncpp.cpp	/^void FastWriter::dropNullPlaceholders() { dropNullPlaceholders_ = true; }$/;"	f	class:Json::FastWriter
dupMeta	jsoncpp.cpp	/^void Value::dupMeta(const Value& other) {$/;"	f	class:Json::Value
dupPayload	jsoncpp.cpp	/^void Value::dupPayload(const Value& other) {$/;"	f	class:Json::Value
duplicate	json/json.h	/^    enum DuplicationPolicy { noDuplication = 0, duplicate, duplicateOnCopy };$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateAndPrefixStringValue	jsoncpp.cpp	/^static inline char* duplicateAndPrefixStringValue(const char* value,$/;"	f	namespace:Json
duplicateOnCopy	json/json.h	/^    enum DuplicationPolicy { noDuplication = 0, duplicate, duplicateOnCopy };$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateStringValue	jsoncpp.cpp	/^static inline char* duplicateStringValue(const char* value, size_t length) {$/;"	f	namespace:Json
emitUTF8_	jsoncpp.cpp	/^  bool emitUTF8_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
empty	jsoncpp.cpp	/^bool Value::empty() const {$/;"	f	class:Json::Value
enableYAMLCompatibility	jsoncpp.cpp	/^void FastWriter::enableYAMLCompatibility() { yamlCompatibilityEnabled_ = true; }$/;"	f	class:Json::FastWriter
end	jsoncpp.cpp	/^Value::const_iterator Value::end() const {$/;"	f	class:Json::Value
end	jsoncpp.cpp	/^Value::iterator Value::end() {$/;"	f	class:Json::Value
end_	jsoncpp.cpp	/^    Location end_;$/;"	m	class:Json::OurReader::Token	file:
end_	jsoncpp.cpp	/^  Location end_ = nullptr;$/;"	m	class:Json::OurReader	file:
endingLineFeedSymbol_	jsoncpp.cpp	/^  String endingLineFeedSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
extra_	jsoncpp.cpp	/^    Location extra_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
failIfExtra_	jsoncpp.cpp	/^  bool failIfExtra_;$/;"	m	class:Json::OurFeatures	file:
features_	jsoncpp.cpp	/^  OurFeatures const features_;$/;"	m	class:Json::OurReader	file:
find	jsoncpp.cpp	/^Value const* Value::find(char const* begin, char const* end) const {$/;"	f	class:Json::Value
fixNumericLocale	jsoncpp.cpp	/^template <typename Iter> Iter fixNumericLocale(Iter begin, Iter end) {$/;"	f	namespace:Json
fixNumericLocaleInput	jsoncpp.cpp	/^template <typename Iter> void fixNumericLocaleInput(Iter begin, Iter end) {$/;"	f	namespace:Json
fixZerosInTheEnd	jsoncpp.cpp	/^template <typename Iter> Iter fixZerosInTheEnd(Iter begin, Iter end) {$/;"	f	namespace:Json
gen	host-node.h	/^	std::default_random_engine gen;$/;"	m	class:ns3::HostNode
get	jsoncpp.cpp	/^String Value::Comments::get(CommentPlacement slot) const {$/;"	f	class:Json::Value::Comments
get	jsoncpp.cpp	/^Value Value::get(ArrayIndex index, const Value& defaultValue) const {$/;"	f	class:Json::Value
get	jsoncpp.cpp	/^Value Value::get(String const& key, Value const& defaultValue) const {$/;"	f	class:Json::Value
get	jsoncpp.cpp	/^Value Value::get(char const* begin, char const* end,$/;"	f	class:Json::Value
get	jsoncpp.cpp	/^Value Value::get(char const* key, Value const& defaultValue) const {$/;"	f	class:Json::Value
getCStringLength	jsoncpp.cpp	/^unsigned Value::getCStringLength() const {$/;"	f	class:Json::Value
getComment	jsoncpp.cpp	/^String Value::getComment(CommentPlacement placement) const {$/;"	f	class:Json::Value
getDecimalPoint	jsoncpp.cpp	/^static inline char getDecimalPoint() {$/;"	f	namespace:Json
getFormatedErrorMessages	jsoncpp.cpp	/^String Reader::getFormatedErrorMessages() const {$/;"	f	class:Json::Reader
getFormattedErrorMessages	jsoncpp.cpp	/^String OurReader::getFormattedErrorMessages() const {$/;"	f	class:Json::OurReader
getFormattedErrorMessages	jsoncpp.cpp	/^String Reader::getFormattedErrorMessages() const {$/;"	f	class:Json::Reader
getLocationLineAndColumn	jsoncpp.cpp	/^String OurReader::getLocationLineAndColumn(Location location) const {$/;"	f	class:Json::OurReader
getLocationLineAndColumn	jsoncpp.cpp	/^String Reader::getLocationLineAndColumn(Location location) const {$/;"	f	class:Json::Reader
getLocationLineAndColumn	jsoncpp.cpp	/^void OurReader::getLocationLineAndColumn(Location location, int& line,$/;"	f	class:Json::OurReader
getLocationLineAndColumn	jsoncpp.cpp	/^void Reader::getLocationLineAndColumn(Location location, int& line,$/;"	f	class:Json::Reader
getMemberNames	jsoncpp.cpp	/^Value::Members Value::getMemberNames() const {$/;"	f	class:Json::Value
getNextChar	jsoncpp.cpp	/^OurReader::Char OurReader::getNextChar() {$/;"	f	class:Json::OurReader
getNextChar	jsoncpp.cpp	/^Reader::Char Reader::getNextChar() {$/;"	f	class:Json::Reader
getOffsetLimit	jsoncpp.cpp	/^ptrdiff_t Value::getOffsetLimit() const { return limit_; }$/;"	f	class:Json::Value
getOffsetStart	jsoncpp.cpp	/^ptrdiff_t Value::getOffsetStart() const { return start_; }$/;"	f	class:Json::Value
getString	jsoncpp.cpp	/^bool Value::getString(char const** begin, char const** end) const {$/;"	f	class:Json::Value
getStructuredErrors	jsoncpp.cpp	/^std::vector<OurReader::StructuredError> OurReader::getStructuredErrors() const {$/;"	f	class:Json::OurReader
getStructuredErrors	jsoncpp.cpp	/^std::vector<Reader::StructuredError> Reader::getStructuredErrors() const {$/;"	f	class:Json::Reader
getValidReaderKeys	jsoncpp.cpp	/^static void getValidReaderKeys(std::set<String>* valid_keys) {$/;"	f	namespace:Json
getValidWriterKeys	jsoncpp.cpp	/^static void getValidWriterKeys(std::set<String>* valid_keys) {$/;"	f	namespace:Json
good	jsoncpp.cpp	/^bool Reader::good() const { return errors_.empty(); }$/;"	f	class:Json::Reader
has	jsoncpp.cpp	/^bool Value::Comments::has(CommentPlacement slot) const {$/;"	f	class:Json::Value::Comments
hasComment	jsoncpp.cpp	/^bool Value::hasComment(CommentPlacement placement) const {$/;"	f	class:Json::Value
hasCommentForValue	jsoncpp.cpp	/^bool BuiltStyledStreamWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
hasCommentForValue	jsoncpp.cpp	/^bool StyledStreamWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
hasCommentForValue	jsoncpp.cpp	/^bool StyledWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::StyledWriter
hex2	jsoncpp.cpp	/^static const char hex2[] = "000102030405060708090a0b0c0d0e0f"$/;"	m	namespace:Json	file:
host_port	opengym-parameter.h	4;"	d
increment	jsoncpp.cpp	/^void ValueIteratorBase::increment() { ++current_; }$/;"	f	class:Json::ValueIteratorBase
indent	jsoncpp.cpp	/^void BuiltStyledStreamWriter::indent() { indentString_ += indentation_; }$/;"	f	class:Json::BuiltStyledStreamWriter
indent	jsoncpp.cpp	/^void StyledStreamWriter::indent() { indentString_ += indentation_; }$/;"	f	class:Json::StyledStreamWriter
indent	jsoncpp.cpp	/^void StyledWriter::indent() { indentString_ += String(indentSize_, ' '); }$/;"	f	class:Json::StyledWriter
indentString_	jsoncpp.cpp	/^  String indentString_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
indentation_	jsoncpp.cpp	/^  String indentation_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
indented_	jsoncpp.cpp	/^  bool indented_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
index	jsoncpp.cpp	/^ArrayIndex Value::CZString::index() const { return index_; }$/;"	f	class:Json::Value::CZString
index	jsoncpp.cpp	/^UInt ValueIteratorBase::index() const {$/;"	f	class:Json::ValueIteratorBase
index_	json/json.h	/^      ArrayIndex index_;$/;"	m	union:Json::Value::CZString::__anon3
initBasic	jsoncpp.cpp	/^void Value::initBasic(ValueType type, bool allocated) {$/;"	f	class:Json::Value
insert	jsoncpp.cpp	/^bool Value::insert(ArrayIndex index, Value&& newValue) {$/;"	f	class:Json::Value
insert	jsoncpp.cpp	/^bool Value::insert(ArrayIndex index, const Value& newValue) {$/;"	f	class:Json::Value
intValue	json/json.h	/^  intValue,      \/\/\/< signed integer value$/;"	e	enum:Json::ValueType
int_	json/json.h	/^    LargestInt int_;$/;"	m	union:Json::Value::ValueHolder
integerToDouble	jsoncpp.cpp	/^static inline double integerToDouble(Json::UInt64 value) {$/;"	f	namespace:Json
integerToDouble	jsoncpp.cpp	/^template <typename T> static inline double integerToDouble(T value) {$/;"	f	namespace:Json
invalidPath	jsoncpp.cpp	/^void Path::invalidPath(const String& \/*path*\/, int \/*location*\/) {$/;"	f	class:Json::Path
is	json/json.h	/^template <> inline bool Value::is<Int64>() const { return isInt64(); }$/;"	f	class:Json::Value
is	json/json.h	/^template <> inline bool Value::is<Int>() const { return isInt(); }$/;"	f	class:Json::Value
is	json/json.h	/^template <> inline bool Value::is<String>() const { return isString(); }$/;"	f	class:Json::Value
is	json/json.h	/^template <> inline bool Value::is<UInt64>() const { return isUInt64(); }$/;"	f	class:Json::Value
is	json/json.h	/^template <> inline bool Value::is<UInt>() const { return isUInt(); }$/;"	f	class:Json::Value
is	json/json.h	/^template <> inline bool Value::is<bool>() const { return isBool(); }$/;"	f	class:Json::Value
is	json/json.h	/^template <> inline bool Value::is<double>() const { return isDouble(); }$/;"	f	class:Json::Value
isAllocated	json/json.h	/^  bool isAllocated() const { return bits_.allocated_; }$/;"	f	class:Json::Value
isAnyCharRequiredQuoting	jsoncpp.cpp	/^static bool isAnyCharRequiredQuoting(char const* s, size_t n) {$/;"	f	namespace:Json
isArray	jsoncpp.cpp	/^bool Value::isArray() const { return type() == arrayValue; }$/;"	f	class:Json::Value
isBool	jsoncpp.cpp	/^bool Value::isBool() const { return type() == booleanValue; }$/;"	f	class:Json::Value
isConvertibleTo	jsoncpp.cpp	/^bool Value::isConvertibleTo(ValueType other) const {$/;"	f	class:Json::Value
isDouble	jsoncpp.cpp	/^bool Value::isDouble() const {$/;"	f	class:Json::Value
isEqual	jsoncpp.cpp	/^bool ValueIteratorBase::isEqual(const SelfType& other) const {$/;"	f	class:Json::ValueIteratorBase
isInt	jsoncpp.cpp	/^bool Value::isInt() const {$/;"	f	class:Json::Value
isInt64	jsoncpp.cpp	/^bool Value::isInt64() const {$/;"	f	class:Json::Value
isIntegral	jsoncpp.cpp	/^bool Value::isIntegral() const {$/;"	f	class:Json::Value
isMember	jsoncpp.cpp	/^bool Value::isMember(String const& key) const {$/;"	f	class:Json::Value
isMember	jsoncpp.cpp	/^bool Value::isMember(char const* begin, char const* end) const {$/;"	f	class:Json::Value
isMember	jsoncpp.cpp	/^bool Value::isMember(char const* key) const {$/;"	f	class:Json::Value
isMultilineArray	jsoncpp.cpp	/^bool BuiltStyledStreamWriter::isMultilineArray(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
isMultilineArray	jsoncpp.cpp	/^bool StyledStreamWriter::isMultilineArray(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
isMultilineArray	jsoncpp.cpp	/^bool StyledWriter::isMultilineArray(const Value& value) {$/;"	f	class:Json::StyledWriter
isNull	jsoncpp.cpp	/^bool Value::isNull() const { return type() == nullValue; }$/;"	f	class:Json::Value
isNumeric	jsoncpp.cpp	/^bool Value::isNumeric() const { return isDouble(); }$/;"	f	class:Json::Value
isObject	jsoncpp.cpp	/^bool Value::isObject() const { return type() == objectValue; }$/;"	f	class:Json::Value
isStaticString	jsoncpp.cpp	/^bool Value::CZString::isStaticString() const {$/;"	f	class:Json::Value::CZString
isString	jsoncpp.cpp	/^bool Value::isString() const { return type() == stringValue; }$/;"	f	class:Json::Value
isUInt	jsoncpp.cpp	/^bool Value::isUInt() const {$/;"	f	class:Json::Value
isUInt64	jsoncpp.cpp	/^bool Value::isUInt64() const {$/;"	f	class:Json::Value
isValidIndex	jsoncpp.cpp	/^bool Value::isValidIndex(ArrayIndex index) const { return index < size(); }$/;"	f	class:Json::Value
isfinite	jsoncpp.cpp	4078;"	d	file:
isnan	jsoncpp.cpp	4074;"	d	file:
jsoncpp_snprintf	json/json-forwards.h	148;"	d
jsoncpp_snprintf	json/json-forwards.h	150;"	d
jsoncpp_snprintf	json/json.h	292;"	d
key	jsoncpp.cpp	/^Value ValueIteratorBase::key() const {$/;"	f	class:Json::ValueIteratorBase
key_	json/json.h	/^  String key_;$/;"	m	class:Json::PathArgument
kindIndex	json/json.h	/^  enum Kind { kindNone = 0, kindIndex, kindKey };$/;"	e	enum:Json::PathArgument::Kind
kindKey	json/json.h	/^  enum Kind { kindNone = 0, kindIndex, kindKey };$/;"	e	enum:Json::PathArgument::Kind
kindNone	json/json.h	/^  enum Kind { kindNone = 0, kindIndex, kindKey };$/;"	e	enum:Json::PathArgument::Kind
lastValueEnd_	jsoncpp.cpp	/^  Location lastValueEnd_ = nullptr;$/;"	m	class:Json::OurReader	file:
lastValueHasAComment_	jsoncpp.cpp	/^  bool lastValueHasAComment_ = false;$/;"	m	class:Json::OurReader	file:
lastValue_	jsoncpp.cpp	/^  Value* lastValue_ = nullptr;$/;"	m	class:Json::OurReader	file:
length	jsoncpp.cpp	/^unsigned Value::CZString::length() const { return storage_.length_; }$/;"	f	class:Json::Value::CZString
length_	json/json.h	/^      unsigned length_ : 30; \/\/ 1GB max$/;"	m	struct:Json::Value::CZString::StringStorage
limit_	json/json.h	/^  ptrdiff_t limit_;$/;"	m	class:Json::Value
m_ObsEvent	host-node.h	/^	EventId m_ObsEvent;							\/\/ Event$/;"	m	class:ns3::HostNode
m_PopularityChangeEvent	host-node.h	/^	EventId m_PopularityChangeEvent;			\/\/ Event$/;"	m	class:ns3::HostNode
m_PopularityChangeSmoothEvent	host-node.h	/^	EventId m_PopularityChangeSmoothEvent;		\/\/ Event$/;"	m	class:ns3::HostNode
m_SendEvent	flow.h	/^	EventId m_SendEvent;$/;"	m	class:ns3::Flow
m_SendEvent	user.h	/^	EventId m_SendEvent;$/;"	m	class:ns3::User
m_SendRateChangeEvent	host-node.h	/^	EventId m_SendRateChangeEvent;				\/\/ Event$/;"	m	class:ns3::HostNode
m_changePopularity	host-node.h	/^	std::map<uint16_t, float> 	m_changePopularity;$/;"	m	class:ns3::HostNode
m_checkNextRequestEvent	target-node.h	/^	EventId m_checkNextRequestEvent;$/;"	m	class:ns3::TargetNode
m_connecteds	host-node.h	/^	std::map<uint16_t, bool>  m_connecteds;$/;"	m	class:ns3::HostNode
m_currentDelay	flow.h	/^	uint32_t m_currentDelay;$/;"	m	class:ns3::Flow
m_currentDelay	user.h	/^	uint64_t m_currentDelay;$/;"	m	class:ns3::User
m_currentGoodput	flow.h	/^	uint32_t m_currentGoodput;$/;"	m	class:ns3::Flow
m_currentGoodput	user.h	/^	uint64_t m_currentGoodput;$/;"	m	class:ns3::User
m_currentPackets	flow.h	/^	uint32_t m_currentPackets;$/;"	m	class:ns3::Flow
m_currentPackets	user.h	/^	uint64_t m_currentPackets;$/;"	m	class:ns3::User
m_currentRequests	user.h	/^	uint64_t m_currentRequests;		\/\/ amount of requests sent before gathering$/;"	m	class:ns3::User
m_currentResults	user.h	/^	uint64_t m_currentResults;		\/\/ amount of results received before gathering$/;"	m	class:ns3::User
m_currentSize	target-table.h	/^	uint64_t m_currentSize;$/;"	m	class:ns3::TargetElement
m_dataObjectId	user.h	/^	uint16_t m_dataObjectId;$/;"	m	class:ns3::User
m_dataObjectTable	target-table.h	134;"	d
m_dataSize	target-table.h	/^			uint64_t m_dataSize;$/;"	m	class:ns3::DataObject
m_epiCount	host-node.h	/^	uint32_t m_epiCount;$/;"	m	class:ns3::HostNode
m_finished	user.h	/^	bool m_finished;$/;"	m	class:ns3::User
m_flowEvents	host-node.h	/^	std::map<uint32_t, EventId> m_flowEvents;	\/\/ Event$/;"	m	class:ns3::HostNode
m_flowNumber	flow.h	/^	uint32_t m_flowNumber;$/;"	m	class:ns3::Flow
m_gymPort	host-node.h	/^	uint16_t m_gymPort;$/;"	m	class:ns3::HostNode
m_intervalMicroSeconds	flow.h	/^	uint32_t m_intervalMicroSeconds;$/;"	m	class:ns3::Flow
m_ip	target-table.h	/^	Ipv4Address m_ip;$/;"	m	class:ns3::TargetElement
m_logCount	host-node.h	/^	uint32_t m_logCount;$/;"	m	class:ns3::HostNode
m_maxSize	target-table.h	/^	uint64_t m_maxSize;$/;"	m	class:ns3::TargetElement
m_nextRequestEvent	target-node.h	/^	EventId m_nextRequestEvent;$/;"	m	class:ns3::TargetNode
m_numFlows	host-node.h	/^	uint32_t m_numFlows;$/;"	m	class:ns3::HostNode
m_numTargets	host-node.h	/^	uint16_t m_numTargets;$/;"	m	class:ns3::HostNode
m_objectId	target-table.h	/^			uint16_t m_objectId;$/;"	m	class:ns3::DataObject
m_popularity	target-table.h	/^			float m_popularity;$/;"	m	class:ns3::DataObject
m_port	target-table.h	/^	uint16_t m_port;$/;"	m	class:ns3::TargetElement
m_readRequestEnqueueEvent	host-node.h	/^	EventId m_readRequestEnqueueEvent;			\/\/ Event$/;"	m	class:ns3::HostNode
m_recvChecker	host-node.h	/^	std::map<uint64_t, uint16_t> m_recvChecker;$/;"	m	class:ns3::HostNode
m_requestDelay_a	target-node.h	/^	uint64_t m_requestDelay_a, m_requestDelay_b;$/;"	m	class:ns3::TargetNode
m_requestDelay_b	target-node.h	/^	uint64_t m_requestDelay_a, m_requestDelay_b;$/;"	m	class:ns3::TargetNode
m_requestInterval	user.h	/^	uint64_t m_requestInterval;   $/;"	m	class:ns3::User
m_requestQueue	target-node.h	/^	std::deque<std::pair<uint16_t, uint64_t>> m_requestQueue;$/;"	m	class:ns3::TargetNode
m_requestSocket	target-node.h	/^	Ptr<Socket> m_requestSocket;$/;"	m	class:ns3::TargetNode
m_requestSocketConnected	target-node.h	/^	bool  m_requestSocketConnected;$/;"	m	class:ns3::TargetNode
m_requestSocketList	target-node.h	/^	std::list<Ptr<Socket>> m_requestSocketList;$/;"	m	class:ns3::TargetNode
m_resultSocket	host-node.h	/^	Ptr<Socket> m_resultSocket;$/;"	m	class:ns3::HostNode
m_resultSocket	target-node.h	/^	Ptr<Socket> m_resultSocket;$/;"	m	class:ns3::TargetNode
m_resultSocketConnected	target-node.h	/^	bool  m_resultSocketConnected;$/;"	m	class:ns3::TargetNode
m_resultSocketList	host-node.h	/^	std::list<Ptr<Socket>> m_resultSocketList;$/;"	m	class:ns3::HostNode
m_sendCallback	flow.h	/^	sendCallback m_sendCallback;$/;"	m	class:ns3::Flow
m_sendCallback	user.h	/^	sendCallback m_sendCallback;$/;"	m	class:ns3::User
m_sendRate	flow.h	/^	float m_sendRate;$/;"	m	class:ns3::Flow
m_serviceTime	user.h	/^	uint64_t m_serviceTime;$/;"	m	class:ns3::User
m_sockets	host-node.h	/^	std::map<uint16_t, Ptr<Socket>> m_sockets;$/;"	m	class:ns3::HostNode
m_submissionQueue	target-node.h	/^	std::deque<std::pair<uint16_t, uint64_t>> m_submissionQueue;$/;"	m	class:ns3::TargetNode
m_target	target-table.h	/^			uint16_t m_target;$/;"	m	class:ns3::DataObject
m_targetDelay	flow.h	/^	uint32_t m_targetDelay;$/;"	m	class:ns3::Flow
m_targetDelay	user.h	/^	uint64_t m_targetDelay;		$/;"	m	class:ns3::User
m_targetSendBuffer	host-node.h	/^	std::map<uint16_t, std::deque<Ptr<Packet>>> m_targetSendBuffer;$/;"	m	class:ns3::HostNode
m_targetSendEvent	host-node.h	/^	std::map<uint16_t, bool> m_targetSendEvent;$/;"	m	class:ns3::HostNode
m_targetWorked	target-node.h	/^	bool  m_targetWorked;$/;"	m	class:ns3::TargetNode
m_targets	host-node.h	/^	std::map<uint16_t, targetAddress> m_targets;$/;"	m	class:ns3::HostNode
m_tier	flow.h	/^	uint16_t m_tier;$/;"	m	class:ns3::Flow
m_tier	target-node.h	/^	uint16_t m_tier;$/;"	m	class:ns3::TargetNode
m_tier	target-table.h	/^	uint16_t m_tier;$/;"	m	class:ns3::TargetElement
m_timestamp	nvme-header.h	/^	uint64_t m_timestamp;$/;"	m	class:ns3::NVMeHeader
m_timestamp	nvme-tag.h	/^    uint64_t m_timestamp;$/;"	m	class:ns3::NVMeTag
m_totalDataObjects	target-table.h	/^	uint16_t m_totalDataObjects;$/;"	m	class:ns3::TargetTable
m_totalRequests	user.h	/^	uint64_t m_totalRequests;		\/\/ Total amount of requests to send$/;"	m	class:ns3::User
m_totalRx	host-node.h	/^	uint64_t m_totalRx;$/;"	m	class:ns3::HostNode
m_totalRx	target-node.h	/^	uint64_t m_totalRx, m_totalRxPackets, m_totalTxPackets;$/;"	m	class:ns3::TargetNode
m_totalRxPackets	target-node.h	/^	uint64_t m_totalRx, m_totalRxPackets, m_totalTxPackets;$/;"	m	class:ns3::TargetNode
m_totalTargets	target-table.h	/^	uint16_t m_totalTargets;$/;"	m	class:ns3::TargetTable
m_totalTx	host-node.h	/^	uint64_t m_totalTx, m_totalTxPackets;$/;"	m	class:ns3::HostNode
m_totalTxPackets	host-node.h	/^	uint64_t m_totalTx, m_totalTxPackets;$/;"	m	class:ns3::HostNode
m_totalTxPackets	target-node.h	/^	uint64_t m_totalRx, m_totalRxPackets, m_totalTxPackets;$/;"	m	class:ns3::TargetNode
m_userId	nvme-header.h	/^    uint16_t m_userId;$/;"	m	class:ns3::NVMeHeader
m_userId	user.h	/^	uint16_t m_userId;$/;"	m	class:ns3::User
m_users	host-node.h	/^	std::map<uint32_t, Ptr<User>> m_users;$/;"	m	class:ns3::HostNode
make	jsoncpp.cpp	/^Value& Path::make(Value& root) const {$/;"	f	class:Json::Path
makePath	jsoncpp.cpp	/^void Path::makePath(const String& path, const InArgs& in) {$/;"	f	class:Json::Path
map_	json/json.h	/^    ObjectValues* map_;$/;"	m	union:Json::Value::ValueHolder
match	jsoncpp.cpp	/^bool OurReader::match(const Char* pattern, int patternLength) {$/;"	f	class:Json::OurReader
match	jsoncpp.cpp	/^bool Reader::match(const Char* pattern, int patternLength) {$/;"	f	class:Json::Reader
maxInt	json/json.h	/^  static constexpr Int maxInt = Int(UInt(-1) \/ 2);$/;"	m	class:Json::Value
maxInt64	json/json.h	/^  static constexpr Int64 maxInt64 = Int64(UInt64(-1) \/ 2);$/;"	m	class:Json::Value
maxLargestInt	json/json.h	/^  static constexpr LargestInt maxLargestInt = LargestInt(LargestUInt(-1) \/ 2);$/;"	m	class:Json::Value
maxLargestUInt	json/json.h	/^  static constexpr LargestUInt maxLargestUInt = LargestUInt(-1);$/;"	m	class:Json::Value
maxUInt	json/json.h	/^  static constexpr UInt maxUInt = UInt(-1);$/;"	m	class:Json::Value
maxUInt64	json/json.h	/^  static constexpr UInt64 maxUInt64 = UInt64(-1);$/;"	m	class:Json::Value
maxUInt64AsDouble	json/json.h	/^  static constexpr double maxUInt64AsDouble = 18446744073709551615.0;$/;"	m	class:Json::Value
max_size	json/json.h	/^  size_type max_size() const { return size_t(-1) \/ sizeof(T); }$/;"	f	class:Json::SecureAllocator
memberName	jsoncpp.cpp	/^char const* ValueIteratorBase::memberName() const {$/;"	f	class:Json::ValueIteratorBase
memberName	jsoncpp.cpp	/^char const* ValueIteratorBase::memberName(char const** end) const {$/;"	f	class:Json::ValueIteratorBase
message	jsoncpp.cpp	/^    String message;$/;"	m	struct:Json::OurReader::StructuredError	file:
message_	jsoncpp.cpp	/^    String message_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
minInt	json/json.h	/^  static constexpr Int minInt = Int(~(UInt(-1) \/ 2));$/;"	m	class:Json::Value
minInt64	json/json.h	/^  static constexpr Int64 minInt64 = Int64(~(UInt64(-1) \/ 2));$/;"	m	class:Json::Value
minLargestInt	json/json.h	/^  static constexpr LargestInt minLargestInt =$/;"	m	class:Json::Value
msg_	json/json.h	/^  String msg_;$/;"	m	class:Json::Exception
msvc_pre1900_c99_snprintf	jsoncpp.cpp	/^int JSON_API msvc_pre1900_c99_snprintf(char* outBuf, size_t size,$/;"	f
msvc_pre1900_c99_vsnprintf	jsoncpp.cpp	/^static int msvc_pre1900_c99_vsnprintf(char* outBuf, size_t size,$/;"	f	file:
name	jsoncpp.cpp	/^String ValueIteratorBase::name() const {$/;"	f	class:Json::ValueIteratorBase
newCharReader	jsoncpp.cpp	/^CharReader* CharReaderBuilder::newCharReader() const {$/;"	f	class:Json::CharReaderBuilder
newStreamWriter	jsoncpp.cpp	/^StreamWriter* StreamWriterBuilder::newStreamWriter() const {$/;"	f	class:Json::StreamWriterBuilder
noDuplication	json/json.h	/^    enum DuplicationPolicy { noDuplication = 0, duplicate, duplicateOnCopy };$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
normalizeEOL	jsoncpp.cpp	/^String OurReader::normalizeEOL(OurReader::Location begin,$/;"	f	class:Json::OurReader
normalizeEOL	jsoncpp.cpp	/^String Reader::normalizeEOL(Reader::Location begin, Reader::Location end) {$/;"	f	class:Json::Reader
ns3	flow.cc	/^namespace ns3 {$/;"	n	file:
ns3	flow.h	/^namespace ns3 {$/;"	n
ns3	host-node.cc	/^namespace ns3 {$/;"	n	file:
ns3	host-node.h	/^namespace ns3 {$/;"	n
ns3	nvme-header.cc	/^namespace ns3 {$/;"	n	file:
ns3	nvme-header.h	/^namespace ns3 {$/;"	n
ns3	nvme-tag.cc	/^namespace ns3 {$/;"	n	file:
ns3	nvme-tag.h	/^namespace ns3 {$/;"	n
ns3	opengym.cc	/^namespace ns3 {$/;"	n	file:
ns3	opengym.h	/^namespace ns3 {$/;"	n
ns3	target-node.cc	/^namespace ns3 {$/;"	n	file:
ns3	target-node.h	/^namespace ns3 {$/;"	n
ns3	target-table.cc	/^namespace ns3 {$/;"	n	file:
ns3	target-table.h	/^namespace ns3 {$/;"	n
ns3	user.cc	/^namespace ns3 {$/;"	n	file:
ns3	user.h	/^namespace ns3 {$/;"	n
null	json/json.h	/^  static const Value& null;$/;"	m	class:Json::Value
null	jsoncpp.cpp	/^Value const& Value::null = Value::nullSingleton();$/;"	m	class:Json::Value	file:
nullRef	json/json.h	/^  static const Value& nullRef;$/;"	m	class:Json::Value
nullRef	jsoncpp.cpp	/^Value const& Value::nullRef = Value::nullSingleton();$/;"	m	class:Json::Value	file:
nullSingleton	jsoncpp.cpp	/^Value const& Value::nullSingleton() {$/;"	f	class:Json::Value
nullSymbol_	jsoncpp.cpp	/^  String nullSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
nullValue	json/json.h	/^  nullValue = 0, \/\/\/< 'null' value$/;"	e	enum:Json::ValueType
numberOfCommentPlacement	json/json.h	/^  numberOfCommentPlacement$/;"	e	enum:Json::CommentPlacement
objectValue	json/json.h	/^  objectValue    \/\/\/< object value (collection of name\/value pairs).$/;"	e	enum:Json::ValueType
offset_limit	jsoncpp.cpp	/^    ptrdiff_t offset_limit;$/;"	m	struct:Json::OurReader::StructuredError	file:
offset_start	jsoncpp.cpp	/^    ptrdiff_t offset_start;$/;"	m	struct:Json::OurReader::StructuredError	file:
omitEndingLineFeed	jsoncpp.cpp	/^void FastWriter::omitEndingLineFeed() { omitEndingLineFeed_ = true; }$/;"	f	class:Json::FastWriter
operator !=	json/json.h	/^  bool operator!=(const SelfType& other) const { return !isEqual(other); }$/;"	f	class:Json::ValueIteratorBase
operator !=	json/json.h	/^bool operator!=(const SecureAllocator<T>&, const SecureAllocator<U>&) {$/;"	f	namespace:Json
operator !=	jsoncpp.cpp	/^bool Value::operator!=(const Value& other) const { return !(*this == other); }$/;"	f	class:Json::Value
operator *	json/json.h	/^  reference operator*() const { return deref(); }$/;"	f	class:Json::ValueConstIterator
operator *	json/json.h	/^  reference operator*() { return deref(); }$/;"	f	class:Json::ValueIterator
operator ++	json/json.h	/^  SelfType operator++(int) {$/;"	f	class:Json::ValueConstIterator
operator ++	json/json.h	/^  SelfType operator++(int) {$/;"	f	class:Json::ValueIterator
operator ++	json/json.h	/^  SelfType& operator++() {$/;"	f	class:Json::ValueConstIterator
operator ++	json/json.h	/^  SelfType& operator++() {$/;"	f	class:Json::ValueIterator
operator -	json/json.h	/^  difference_type operator-(const SelfType& other) const {$/;"	f	class:Json::ValueIteratorBase
operator --	json/json.h	/^  SelfType operator--(int) {$/;"	f	class:Json::ValueConstIterator
operator --	json/json.h	/^  SelfType operator--(int) {$/;"	f	class:Json::ValueIterator
operator --	json/json.h	/^  SelfType& operator--() {$/;"	f	class:Json::ValueConstIterator
operator --	json/json.h	/^  SelfType& operator--() {$/;"	f	class:Json::ValueIterator
operator ->	json/json.h	/^  pointer operator->() const { return &deref(); }$/;"	f	class:Json::ValueConstIterator
operator ->	json/json.h	/^  pointer operator->() { return &deref(); }$/;"	f	class:Json::ValueIterator
operator <	jsoncpp.cpp	/^bool Value::CZString::operator<(const CZString& other) const {$/;"	f	class:Json::Value::CZString
operator <	jsoncpp.cpp	/^bool Value::operator<(const Value& other) const {$/;"	f	class:Json::Value
operator <<	jsoncpp.cpp	/^OStream& operator<<(OStream& sout, Value const& root) {$/;"	f	namespace:Json
operator <=	jsoncpp.cpp	/^bool Value::operator<=(const Value& other) const { return !(other < *this); }$/;"	f	class:Json::Value
operator =	jsoncpp.cpp	/^Value& Value::operator=(Value&& other) {$/;"	f	class:Json::Value
operator =	jsoncpp.cpp	/^Value& Value::operator=(const Value& other) {$/;"	f	class:Json::Value
operator =	jsoncpp.cpp	/^Value::CZString& Value::CZString::operator=(CZString&& other) {$/;"	f	class:Json::Value::CZString
operator =	jsoncpp.cpp	/^Value::CZString& Value::CZString::operator=(const CZString& other) {$/;"	f	class:Json::Value::CZString
operator =	jsoncpp.cpp	/^Value::Comments& Value::Comments::operator=(Comments&& that) {$/;"	f	class:Json::Value::Comments
operator =	jsoncpp.cpp	/^Value::Comments& Value::Comments::operator=(const Comments& that) {$/;"	f	class:Json::Value::Comments
operator =	jsoncpp.cpp	/^ValueIterator& ValueIterator::operator=(const SelfType& other) {$/;"	f	class:Json::ValueIterator
operator =	jsoncpp.cpp	/^operator=(const ValueIteratorBase& other) {$/;"	f	class:Json::ValueConstIterator
operator ==	json/json.h	/^  bool operator==(const SelfType& other) const { return isEqual(other); }$/;"	f	class:Json::ValueIteratorBase
operator ==	json/json.h	/^bool operator==(const SecureAllocator<T>&, const SecureAllocator<U>&) {$/;"	f	namespace:Json
operator ==	jsoncpp.cpp	/^bool Value::CZString::operator==(const CZString& other) const {$/;"	f	class:Json::Value::CZString
operator ==	jsoncpp.cpp	/^bool Value::operator==(const Value& other) const {$/;"	f	class:Json::Value
operator >	jsoncpp.cpp	/^bool Value::operator>(const Value& other) const { return other < *this; }$/;"	f	class:Json::Value
operator >=	jsoncpp.cpp	/^bool Value::operator>=(const Value& other) const { return !(*this < other); }$/;"	f	class:Json::Value
operator >>	jsoncpp.cpp	/^IStream& operator>>(IStream& sin, Value& root) {$/;"	f	namespace:Json
operator []	jsoncpp.cpp	/^Value const& Value::operator[](const String& key) const {$/;"	f	class:Json::Value
operator []	jsoncpp.cpp	/^Value& CharReaderBuilder::operator[](const String& key) {$/;"	f	class:Json::CharReaderBuilder
operator []	jsoncpp.cpp	/^Value& StreamWriterBuilder::operator[](const String& key) {$/;"	f	class:Json::StreamWriterBuilder
operator []	jsoncpp.cpp	/^Value& Value::operator[](ArrayIndex index) {$/;"	f	class:Json::Value
operator []	jsoncpp.cpp	/^Value& Value::operator[](const StaticString& key) {$/;"	f	class:Json::Value
operator []	jsoncpp.cpp	/^Value& Value::operator[](const String& key) {$/;"	f	class:Json::Value
operator []	jsoncpp.cpp	/^Value& Value::operator[](const char* key) {$/;"	f	class:Json::Value
operator []	jsoncpp.cpp	/^Value& Value::operator[](int index) {$/;"	f	class:Json::Value
operator []	jsoncpp.cpp	/^const Value& Value::operator[](ArrayIndex index) const {$/;"	f	class:Json::Value
operator []	jsoncpp.cpp	/^const Value& Value::operator[](const char* key) const {$/;"	f	class:Json::Value
operator []	jsoncpp.cpp	/^const Value& Value::operator[](int index) const {$/;"	f	class:Json::Value
operator bool	jsoncpp.cpp	/^Value::operator bool() const { return !isNull(); }$/;"	f	class:Json::Value
operator const char*	json/json.h	/^  operator const char*() const { return c_str_; }$/;"	f	class:Json::StaticString
other	jsoncpp.cpp	/^ValueIterator::ValueIterator(const ValueIterator& other) = default;$/;"	m	class:Json::ValueIterator	file:
override	json/json.h	/^  CharReader* newCharReader() const override;$/;"	m	class:Json::CharReaderBuilder
override	json/json.h	/^  StreamWriter* newStreamWriter() const override;$/;"	m	class:Json::StreamWriterBuilder
override	json/json.h	/^  char const* what() const JSONCPP_NOEXCEPT override;$/;"	m	class:Json::Exception
override	json/json.h	/^  ~CharReaderBuilder() override;$/;"	m	class:Json::CharReaderBuilder
override	json/json.h	/^  ~Exception() JSONCPP_NOEXCEPT override;$/;"	m	class:Json::Exception
override	json/json.h	/^  ~StreamWriterBuilder() override;$/;"	m	class:Json::StreamWriterBuilder
override	jsoncpp.cpp	/^  int write(Value const& root, OStream* sout) override;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
packetCounter	target-node.h	/^	std::map<uint16_t, uint64_t> packetCounter;$/;"	m	class:ns3::TargetNode
parse	jsoncpp.cpp	/^bool OurReader::parse(const char* beginDoc, const char* endDoc, Value& root,$/;"	f	class:Json::OurReader
parse	jsoncpp.cpp	/^bool Reader::parse(const char* beginDoc, const char* endDoc, Value& root,$/;"	f	class:Json::Reader
parse	jsoncpp.cpp	/^bool Reader::parse(const std::string& document, Value& root,$/;"	f	class:Json::Reader
parse	jsoncpp.cpp	/^bool Reader::parse(std::istream& is, Value& root, bool collectComments) {$/;"	f	class:Json::Reader
parseFromStream	jsoncpp.cpp	/^bool parseFromStream(CharReader::Factory const& fact, IStream& sin, Value* root,$/;"	f	namespace:Json
policy_	json/json.h	/^      unsigned policy_ : 2;$/;"	m	struct:Json::Value::CZString::StringStorage
precisionType_	jsoncpp.cpp	/^  PrecisionType precisionType_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
precision_	jsoncpp.cpp	/^  unsigned int precision_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
pushError	jsoncpp.cpp	/^bool Reader::pushError(const Value& value, const String& message) {$/;"	f	class:Json::Reader
pushError	jsoncpp.cpp	/^bool Reader::pushError(const Value& value, const String& message,$/;"	f	class:Json::Reader
pushValue	jsoncpp.cpp	/^void BuiltStyledStreamWriter::pushValue(String const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
pushValue	jsoncpp.cpp	/^void StyledStreamWriter::pushValue(const String& value) {$/;"	f	class:Json::StyledStreamWriter
pushValue	jsoncpp.cpp	/^void StyledWriter::pushValue(const String& value) {$/;"	f	class:Json::StyledWriter
readArray	jsoncpp.cpp	/^bool OurReader::readArray(Token& token) {$/;"	f	class:Json::OurReader
readArray	jsoncpp.cpp	/^bool Reader::readArray(Token& token) {$/;"	f	class:Json::Reader
readCStyleComment	jsoncpp.cpp	/^bool OurReader::readCStyleComment(bool* containsNewLineResult) {$/;"	f	class:Json::OurReader
readCStyleComment	jsoncpp.cpp	/^bool Reader::readCStyleComment() {$/;"	f	class:Json::Reader
readComment	jsoncpp.cpp	/^bool OurReader::readComment() {$/;"	f	class:Json::OurReader
readComment	jsoncpp.cpp	/^bool Reader::readComment() {$/;"	f	class:Json::Reader
readCppStyleComment	jsoncpp.cpp	/^bool OurReader::readCppStyleComment() {$/;"	f	class:Json::OurReader
readCppStyleComment	jsoncpp.cpp	/^bool Reader::readCppStyleComment() {$/;"	f	class:Json::Reader
readNumber	jsoncpp.cpp	/^bool OurReader::readNumber(bool checkInf) {$/;"	f	class:Json::OurReader
readNumber	jsoncpp.cpp	/^void Reader::readNumber() {$/;"	f	class:Json::Reader
readObject	jsoncpp.cpp	/^bool OurReader::readObject(Token& token) {$/;"	f	class:Json::OurReader
readObject	jsoncpp.cpp	/^bool Reader::readObject(Token& token) {$/;"	f	class:Json::Reader
readString	jsoncpp.cpp	/^bool OurReader::readString() {$/;"	f	class:Json::OurReader
readString	jsoncpp.cpp	/^bool Reader::readString() {$/;"	f	class:Json::Reader
readStringSingleQuote	jsoncpp.cpp	/^bool OurReader::readStringSingleQuote() {$/;"	f	class:Json::OurReader
readToken	jsoncpp.cpp	/^bool OurReader::readToken(Token& token) {$/;"	f	class:Json::OurReader
readToken	jsoncpp.cpp	/^bool Reader::readToken(Token& token) {$/;"	f	class:Json::Reader
readValue	jsoncpp.cpp	/^bool OurReader::readValue() {$/;"	f	class:Json::OurReader
readValue	jsoncpp.cpp	/^bool Reader::readValue() {$/;"	f	class:Json::Reader
reader_	jsoncpp.cpp	/^  OurReader reader_;$/;"	m	class:Json::OurCharReader	file:
realValue	json/json.h	/^  realValue,     \/\/\/< double value$/;"	e	enum:Json::ValueType
real_	json/json.h	/^    double real_;$/;"	m	union:Json::Value::ValueHolder
rebind	json/json.h	/^  template <typename U> struct rebind { using other = SecureAllocator<U>; };$/;"	s	class:Json::SecureAllocator
receiveCounter	user.h	/^	std::map<uint16_t, uint64_t> receiveCounter;$/;"	m	class:ns3::User
recoverFromError	jsoncpp.cpp	/^bool OurReader::recoverFromError(TokenType skipUntilToken) {$/;"	f	class:Json::OurReader
recoverFromError	jsoncpp.cpp	/^bool Reader::recoverFromError(TokenType skipUntilToken) {$/;"	f	class:Json::Reader
rejectDupKeys_	jsoncpp.cpp	/^  bool rejectDupKeys_;$/;"	m	class:Json::OurFeatures	file:
releasePayload	jsoncpp.cpp	/^void Value::releasePayload() {$/;"	f	class:Json::Value
releasePrefixedStringValue	jsoncpp.cpp	/^static inline void releasePrefixedStringValue(char* value) { free(value); }$/;"	f	namespace:Json
releasePrefixedStringValue	jsoncpp.cpp	/^static inline void releasePrefixedStringValue(char* value) {$/;"	f	namespace:Json
releaseStringValue	jsoncpp.cpp	/^static inline void releaseStringValue(char* value, unsigned length) {$/;"	f	namespace:Json
releaseStringValue	jsoncpp.cpp	/^static inline void releaseStringValue(char* value, unsigned) { free(value); }$/;"	f	namespace:Json
removeIndex	jsoncpp.cpp	/^bool Value::removeIndex(ArrayIndex index, Value* removed) {$/;"	f	class:Json::Value
removeMember	jsoncpp.cpp	/^bool Value::removeMember(String const& key, Value* removed) {$/;"	f	class:Json::Value
removeMember	jsoncpp.cpp	/^bool Value::removeMember(const char* begin, const char* end, Value* removed) {$/;"	f	class:Json::Value
removeMember	jsoncpp.cpp	/^bool Value::removeMember(const char* key, Value* removed) {$/;"	f	class:Json::Value
removeMember	jsoncpp.cpp	/^void Value::removeMember(const String& key) { removeMember(key.c_str()); }$/;"	f	class:Json::Value
removeMember	jsoncpp.cpp	/^void Value::removeMember(const char* key) {$/;"	f	class:Json::Value
resize	jsoncpp.cpp	/^void Value::resize(ArrayIndex newSize) {$/;"	f	class:Json::Value
resolve	jsoncpp.cpp	/^Value Path::resolve(const Value& root, const Value& defaultValue) const {$/;"	f	class:Json::Path
resolve	jsoncpp.cpp	/^const Value& Path::resolve(const Value& root) const {$/;"	f	class:Json::Path
resolveReference	jsoncpp.cpp	/^Value& Value::resolveReference(char const* key, char const* end) {$/;"	f	class:Json::Value
resolveReference	jsoncpp.cpp	/^Value& Value::resolveReference(const char* key) {$/;"	f	class:Json::Value
rightMargin_	jsoncpp.cpp	/^  unsigned int rightMargin_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
sendCallback	flow.h	/^	typedef Callback<void, uint32_t> sendCallback;$/;"	t	class:ns3::Flow
sendCallback	user.h	/^	typedef Callback<void, uint16_t> sendCallback;$/;"	t	class:ns3::User
sendCounter	user.h	/^	std::map<uint16_t, uint64_t> sendCounter;$/;"	m	class:ns3::User
set	jsoncpp.cpp	/^void Value::Comments::set(CommentPlacement slot, String comment) {$/;"	f	class:Json::Value::Comments
setComment	json/json.h	/^  void setComment(const char* comment, CommentPlacement placement) {$/;"	f	class:Json::Value
setComment	json/json.h	/^  void setComment(const char* comment, size_t len, CommentPlacement placement) {$/;"	f	class:Json::Value
setComment	jsoncpp.cpp	/^void Value::setComment(String comment, CommentPlacement placement) {$/;"	f	class:Json::Value
setDefaults	jsoncpp.cpp	/^void CharReaderBuilder::setDefaults(Json::Value* settings) {$/;"	f	class:Json::CharReaderBuilder
setDefaults	jsoncpp.cpp	/^void StreamWriterBuilder::setDefaults(Json::Value* settings) {$/;"	f	class:Json::StreamWriterBuilder
setIsAllocated	json/json.h	/^  void setIsAllocated(bool v) { bits_.allocated_ = v; }$/;"	f	class:Json::Value
setOffsetLimit	jsoncpp.cpp	/^void Value::setOffsetLimit(ptrdiff_t limit) { limit_ = limit; }$/;"	f	class:Json::Value
setOffsetStart	jsoncpp.cpp	/^void Value::setOffsetStart(ptrdiff_t start) { start_ = start; }$/;"	f	class:Json::Value
setType	json/json.h	/^  void setType(ValueType v) {$/;"	f	class:Json::Value
settings_	json/json.h	/^  Json::Value settings_;$/;"	m	class:Json::CharReaderBuilder
settings_	json/json.h	/^  Json::Value settings_;$/;"	m	class:Json::StreamWriterBuilder
significantDigits	json/json.h	/^  significantDigits = 0, \/\/\/< we set max number of significant digits in string$/;"	e	enum:Json::PrecisionType
size	jsoncpp.cpp	/^ArrayIndex Value::size() const {$/;"	f	class:Json::Value
skipCommentTokens	jsoncpp.cpp	/^void OurReader::skipCommentTokens(Token& token) {$/;"	f	class:Json::OurReader
skipCommentTokens	jsoncpp.cpp	/^void Reader::skipCommentTokens(Token& token) {$/;"	f	class:Json::Reader
skipSpaces	jsoncpp.cpp	/^void OurReader::skipSpaces() {$/;"	f	class:Json::OurReader
skipSpaces	jsoncpp.cpp	/^void Reader::skipSpaces() {$/;"	f	class:Json::Reader
sout_	json/json.h	/^  OStream* sout_; \/\/ not owned; will not delete$/;"	m	class:Json::StreamWriter
sscanf	jsoncpp.cpp	261;"	d	file:
stackLimit_	jsoncpp.cpp	/^  size_t stackLimit_;$/;"	m	class:Json::OurFeatures	file:
stackLimit_g	jsoncpp.cpp	/^static size_t const stackLimit_g =$/;"	v	file:
start_	json/json.h	/^  ptrdiff_t start_;$/;"	m	class:Json::Value
start_	jsoncpp.cpp	/^    Location start_;$/;"	m	class:Json::OurReader::Token	file:
storage_	json/json.h	/^      StringStorage storage_;$/;"	m	union:Json::Value::CZString::__anon3
strictMode	jsoncpp.cpp	/^Features Features::strictMode() {$/;"	f	class:Json::Features
strictMode	jsoncpp.cpp	/^void CharReaderBuilder::strictMode(Json::Value* settings) {$/;"	f	class:Json::CharReaderBuilder
strictRoot_	jsoncpp.cpp	/^  bool strictRoot_;$/;"	m	class:Json::OurFeatures	file:
stringValue	json/json.h	/^  stringValue,   \/\/\/< UTF-8 string value$/;"	e	enum:Json::ValueType
string_	json/json.h	/^    char* string_; \/\/ if allocated_, ptr to { unsigned, char[] }.$/;"	m	union:Json::Value::ValueHolder
swap	json/json.h	/^inline void swap(Value& a, Value& b) { a.swap(b); }$/;"	f	namespace:Json
swap	jsoncpp.cpp	/^void Value::CZString::swap(CZString& other) {$/;"	f	class:Json::Value::CZString
swap	jsoncpp.cpp	/^void Value::swap(Value& other) {$/;"	f	class:Json::Value
swapPayload	jsoncpp.cpp	/^void Value::swapPayload(Value& other) {$/;"	f	class:Json::Value
targetAddress	host-node.h	/^	typedef std::pair<Ipv4Address, uint16_t> targetAddress;$/;"	t	class:ns3::HostNode
targetMap	target-table.h	/^	std::map<uint16_t, Ptr<TargetElement>> targetMap;$/;"	m	class:ns3::TargetTable
target_port	opengym-parameter.h	5;"	d
throwLogicError	jsoncpp.cpp	/^JSONCPP_NORETURN void throwLogicError(String const& msg) {$/;"	f	namespace:Json
throwRuntimeError	jsoncpp.cpp	/^JSONCPP_NORETURN void throwRuntimeError(String const& msg) {$/;"	f	namespace:Json
toHex16Bit	jsoncpp.cpp	/^static String toHex16Bit(unsigned int x) {$/;"	f	namespace:Json
toStyledString	jsoncpp.cpp	/^String Value::toStyledString() const {$/;"	f	class:Json::Value
tokenArrayBegin	jsoncpp.cpp	/^    tokenArrayBegin,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenArrayEnd	jsoncpp.cpp	/^    tokenArrayEnd,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenArraySeparator	jsoncpp.cpp	/^    tokenArraySeparator,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenComment	jsoncpp.cpp	/^    tokenComment,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenEndOfStream	jsoncpp.cpp	/^    tokenEndOfStream = 0,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenError	jsoncpp.cpp	/^    tokenError$/;"	e	enum:Json::OurReader::TokenType	file:
tokenFalse	jsoncpp.cpp	/^    tokenFalse,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenMemberSeparator	jsoncpp.cpp	/^    tokenMemberSeparator,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNaN	jsoncpp.cpp	/^    tokenNaN,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNegInf	jsoncpp.cpp	/^    tokenNegInf,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNull	jsoncpp.cpp	/^    tokenNull,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNumber	jsoncpp.cpp	/^    tokenNumber,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenObjectBegin	jsoncpp.cpp	/^    tokenObjectBegin,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenObjectEnd	jsoncpp.cpp	/^    tokenObjectEnd,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenPosInf	jsoncpp.cpp	/^    tokenPosInf,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenString	jsoncpp.cpp	/^    tokenString,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenTrue	jsoncpp.cpp	/^    tokenTrue,$/;"	e	enum:Json::OurReader::TokenType	file:
token_	jsoncpp.cpp	/^    Token token_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
type	jsoncpp.cpp	/^ValueType Value::type() const {$/;"	f	class:Json::Value
type_	jsoncpp.cpp	/^    TokenType type_;$/;"	m	class:Json::OurReader::Token	file:
uintToString	jsoncpp.cpp	/^static inline void uintToString(LargestUInt value, char*& current) {$/;"	f	namespace:Json
uintToStringBufferSize	jsoncpp.cpp	/^  uintToStringBufferSize = 3 * sizeof(LargestUInt) + 1$/;"	e	enum:Json::__anon1	file:
uintValue	json/json.h	/^  uintValue,     \/\/\/< unsigned integer value$/;"	e	enum:Json::ValueType
uint_	json/json.h	/^    LargestUInt uint_;$/;"	m	union:Json::Value::ValueHolder
unindent	jsoncpp.cpp	/^void BuiltStyledStreamWriter::unindent() {$/;"	f	class:Json::BuiltStyledStreamWriter
unindent	jsoncpp.cpp	/^void StyledStreamWriter::unindent() {$/;"	f	class:Json::StyledStreamWriter
unindent	jsoncpp.cpp	/^void StyledWriter::unindent() {$/;"	f	class:Json::StyledWriter
useSpecialFloats_	jsoncpp.cpp	/^  bool useSpecialFloats_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
utf8ToCodepoint	jsoncpp.cpp	/^static unsigned int utf8ToCodepoint(const char*& s, const char* e) {$/;"	f	namespace:Json
validate	jsoncpp.cpp	/^bool CharReaderBuilder::validate(Json::Value* invalid) const {$/;"	f	class:Json::CharReaderBuilder
validate	jsoncpp.cpp	/^bool StreamWriterBuilder::validate(Json::Value* invalid) const {$/;"	f	class:Json::StreamWriterBuilder
valueToQuotedString	jsoncpp.cpp	/^String valueToQuotedString(const char* value) {$/;"	f	namespace:Json
valueToQuotedStringN	jsoncpp.cpp	/^static String valueToQuotedStringN(const char* value, unsigned length,$/;"	f	namespace:Json
valueToString	jsoncpp.cpp	/^String valueToString(Int value) { return valueToString(LargestInt(value)); }$/;"	f	namespace:Json
valueToString	jsoncpp.cpp	/^String valueToString(LargestInt value) {$/;"	f	namespace:Json
valueToString	jsoncpp.cpp	/^String valueToString(LargestUInt value) {$/;"	f	namespace:Json
valueToString	jsoncpp.cpp	/^String valueToString(UInt value) { return valueToString(LargestUInt(value)); }$/;"	f	namespace:Json
valueToString	jsoncpp.cpp	/^String valueToString(bool value) { return value ? "true" : "false"; }$/;"	f	namespace:Json
valueToString	jsoncpp.cpp	/^String valueToString(double value, bool useSpecialFloats,$/;"	f	namespace:Json::__anon2
valueToString	jsoncpp.cpp	/^String valueToString(double value, unsigned int precision,$/;"	f	namespace:Json
value_	json/json.h	/^  } value_;$/;"	m	class:Json::Value	typeref:union:Json::Value::ValueHolder
value_type_	json/json.h	/^    unsigned int value_type_ : 8;$/;"	m	struct:Json::Value::__anon4
write	jsoncpp.cpp	/^String FastWriter::write(const Value& root) {$/;"	f	class:Json::FastWriter
write	jsoncpp.cpp	/^String StyledWriter::write(const Value& root) {$/;"	f	class:Json::StyledWriter
write	jsoncpp.cpp	/^int BuiltStyledStreamWriter::write(Value const& root, OStream* sout) {$/;"	f	class:Json::BuiltStyledStreamWriter
write	jsoncpp.cpp	/^void StyledStreamWriter::write(OStream& out, const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeArrayValue	jsoncpp.cpp	/^void BuiltStyledStreamWriter::writeArrayValue(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeArrayValue	jsoncpp.cpp	/^void StyledStreamWriter::writeArrayValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
writeArrayValue	jsoncpp.cpp	/^void StyledWriter::writeArrayValue(const Value& value) {$/;"	f	class:Json::StyledWriter
writeCommentAfterValueOnSameLine	jsoncpp.cpp	/^void BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine($/;"	f	class:Json::BuiltStyledStreamWriter
writeCommentAfterValueOnSameLine	jsoncpp.cpp	/^void StyledStreamWriter::writeCommentAfterValueOnSameLine(const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeCommentAfterValueOnSameLine	jsoncpp.cpp	/^void StyledWriter::writeCommentAfterValueOnSameLine(const Value& root) {$/;"	f	class:Json::StyledWriter
writeCommentBeforeValue	jsoncpp.cpp	/^void BuiltStyledStreamWriter::writeCommentBeforeValue(Value const& root) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeCommentBeforeValue	jsoncpp.cpp	/^void StyledStreamWriter::writeCommentBeforeValue(const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeCommentBeforeValue	jsoncpp.cpp	/^void StyledWriter::writeCommentBeforeValue(const Value& root) {$/;"	f	class:Json::StyledWriter
writeIndent	jsoncpp.cpp	/^void BuiltStyledStreamWriter::writeIndent() {$/;"	f	class:Json::BuiltStyledStreamWriter
writeIndent	jsoncpp.cpp	/^void StyledStreamWriter::writeIndent() {$/;"	f	class:Json::StyledStreamWriter
writeIndent	jsoncpp.cpp	/^void StyledWriter::writeIndent() {$/;"	f	class:Json::StyledWriter
writeString	jsoncpp.cpp	/^String writeString(StreamWriter::Factory const& factory, Value const& root) {$/;"	f	namespace:Json
writeValue	jsoncpp.cpp	/^void BuiltStyledStreamWriter::writeValue(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeValue	jsoncpp.cpp	/^void FastWriter::writeValue(const Value& value) {$/;"	f	class:Json::FastWriter
writeValue	jsoncpp.cpp	/^void StyledStreamWriter::writeValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
writeValue	jsoncpp.cpp	/^void StyledWriter::writeValue(const Value& value) {$/;"	f	class:Json::StyledWriter
writeWithIndent	jsoncpp.cpp	/^void BuiltStyledStreamWriter::writeWithIndent(String const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeWithIndent	jsoncpp.cpp	/^void StyledStreamWriter::writeWithIndent(const String& value) {$/;"	f	class:Json::StyledStreamWriter
writeWithIndent	jsoncpp.cpp	/^void StyledWriter::writeWithIndent(const String& value) {$/;"	f	class:Json::StyledWriter
~CZString	jsoncpp.cpp	/^Value::CZString::~CZString() {$/;"	f	class:Json::Value::CZString
~DataObject	target-table.h	/^			virtual ~DataObject () {};$/;"	f	class:ns3::DataObject
~Flow	flow.cc	/^Flow::~Flow () {}$/;"	f	class:ns3::Flow
~HostNode	host-node.cc	/^HostNode::~HostNode () {}$/;"	f	class:ns3::HostNode
~NVMeHeader	nvme-header.cc	/^NVMeHeader::~NVMeHeader () {}$/;"	f	class:ns3::NVMeHeader
~NVMeTag	nvme-tag.cc	/^NVMeTag::~NVMeTag () {}$/;"	f	class:ns3::NVMeTag
~TargetElement	target-table.h	/^	~TargetElement () {};$/;"	f	class:ns3::TargetElement
~TargetNode	target-node.cc	/^TargetNode::~TargetNode () {}$/;"	f	class:ns3::TargetNode
~TargetTable	target-table.h	/^	~TargetTable () {};$/;"	f	class:ns3::TargetTable
~User	user.cc	/^User::~User() {$/;"	f	class:ns3::User
~Value	jsoncpp.cpp	/^Value::~Value() {$/;"	f	class:Json::Value
